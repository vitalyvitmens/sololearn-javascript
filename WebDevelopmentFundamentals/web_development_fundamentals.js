//TODO: Web Development Fundamentals (Основы веб-разработки)
// Курс «Основы веб-разработки» охватывает основы основных технологий, необходимые для создания веб-страниц, включая HTML, CSS и JavaScript. В качестве курсового проекта мы создадим с нуля функциональный веб-сайт по продаже билетов. Курс «Основы веб-разработки» не требует предварительного опыта программирования, так что давайте приступим прямо сейчас!)

//TODO: Web Development (Веб-разработка)
// Строительными блоками всех веб-страниц являются HTML, CSS и JavaScript . HTML — это язык разметки, который используется для того, чтобы сообщить браузеру, какова структура и содержимое веб-страницы. Посмотрите этот простой HTML- код, чтобы создать абзац текста:
{
  /* <p>Hello Vitaly</p> */
}
// Нажмите на код и измените текст в коде, чтобы показать свое имя, затем запустите код, чтобы увидеть результат.

//TODO: HTML (HTML)
// HTML состоит из различных элементов, которые определяют поведение содержимого страницы. Наш пример кода создает элемент абзаца:
// Некоторые другие примеры элементов включают изображения, заголовки, ссылки и т.д.
{
  /* <p>Hello there</p>  */
}

//TODO: HTML Elements (HTML-элементы)
// HTML-элемент создается с помощью тегов . Например, чтобы сделать абзац, мы должны заключить его в тег абзаца :
{
  /* <p>I am learning HTML</p>  */
}
// Тег <p> используется для определения абзаца текста.

//TODO: HTML Elements (HTML-элементы)
// Давайте снова посмотрим на код:
{
  /* <p>I am learning HTML</p>  */
}
// <p> — открывающий тег абзаца. Он определяет начало элемента.
// Элемент должен быть закрыт с помощью тега </p>, который используется для определения конца элемента. Обратите внимание на косую черту в теге — она используется для определения закрывающего тега.
// Текст между открывающим и закрывающим тегами является содержимым элемента.
// Эти компоненты составляют полноценный HTML-элемент.

//TODO: HTML Elements (HTML-элементы)
// Теперь, когда пользователь открывает страницу с помощью браузера, он будет обрабатывать заданные элементы и отображать содержимое для пользователя. Таким образом, элемент <p>I am learning HTML</p> будет отображаться для пользователя как простая строка текста без тегов: I am learning HTML
// Откройте текст выше и сделайте его допустимым элементом абзаца.

//TODO: HTML Elements (HTML-элементы)
// Важно использовать правильные имена тегов и скобки.
// Если вы сделаете опечатку в теге, браузер не сможет ее обработать и будет просто считать текстом. Например:
// Исправьте код, чтобы создать допустимый абзац текста.
// [par] some text [/par]
{
  /* <p>some text</p>   */
}

//TODO: Your First HTML (Ваш первый HTML)
// HTML-страница может содержать несколько элементов. Например, давайте создадим два абзаца:
// Помните, что каждому открывающему тегу <p> нужен закрывающий тег.
// Измените код и создайте карточку профиля с вашей информацией в следующем формате:
// Name: your name
// Age: your age
// Nationality: your nationality
{
  /* <p>I am learning HTML</p>
<p>HTML is fun</p>  */
}

//TODO: Practice: Welcome to Code Repo! (Практика: Добро пожаловать в репозиторий кода!)
// В этом проекте мы создадим сайт продажи билетов на Эйфелеву башню в Париже!
// Мы начнем с базовой веб-структуры, затем стилизуем страницу и создадим раздел расчета стоимости билетов. Давайте начнем с базового HTML!
// Задача: Код содержит текст краткого описания Эйфелевой башни. Оберните текст тегами абзаца. Добавьте новый абзац там, где вы видите разрыв строки (вы должны сделать 3 абзаца).
// Подсказка: абзац должен начинаться с тега <p> и заканчиваться закрывающим тегом </p>. Например:

//TODO: Headings (Заголовки)
// Тег <h1> используется для создания заголовка нашей страницы:
// Теперь текст My Website будет заголовком нашей страницы.
// Задача : изменить код и сделать текст «HTML is fun» заголовком.
{
  /* <h1>My Website</h1>  */
}

//TODO: Headings (Заголовки)
// Веб-страница может иметь несколько заголовков и подзаголовков.
// Для этого HTML предоставляет 6 различных тегов заголовков: от <h1> до <h6> . Например:
// <h1> — самый важный заголовок, а <h6> — наименее важный.

//TODO: Headings (Заголовки)
// Лучше всего иметь на странице один элемент <h1> , который определяет основной заголовок, а другой элемент заголовка использовать для других заголовков на странице.
// Задача : Откройте код и заполните его своей информацией.
// <h1> по умолчанию является самым большим заголовком, а <h6> — самым маленьким.

//TODO: Text Formatting (Форматирование текста)
// Для форматирования текста доступно несколько тегов. Тег <b> используется для выделения текста жирным шрифтом:
// Откройте код и измените текст, чтобы ваше имя было жирным.
{
  /* <b>A bold text</b> */
}

//TODO: Important Text (Важный текст)
// Тег <strong> используется для обозначения важности текста.
// С точки зрения стиля, он также делает текст жирным, однако его цель не просто сделать текст жирным, а продемонстрировать его важность по сравнению с соседним текстом.
{
  /* <strong>Warning!</strong>  */
}

//TODO: <strong> vs <b></b> (<strong> против <b>)
// Таким образом, мы можем сделать текст жирным, используя теги <b> и <strong>.
// Но какой из них мы должны использовать? Элемент <strong> предназначен для содержимого, которое имеет «большую важность», например предупреждения и оповещения. Элемент <b> предназначен для контента, который мы хотим выделить в предложении.
// Тег <strong> используется, чтобы сделать его семантически важным, в то время как <b> просто выделяет текст жирным шрифтом.

//TODO: Italic and Emphasis (Курсив и выделение)
// Тег <i> используется для выделения текста курсивом:
// Задача : изменить код, чтобы ваше имя было выделено курсивом. Вы также можете выделить текст курсивом, используя тег <em>, который используется для выделения акцента.
// Тег <em> предназначен для слов с ударением по сравнению с окружающим текстом.
{
  /* <i>some text</i>  */
}

//TODO: Underline (Подчеркнуть)
// Чтобы подчеркнуть текст, используйте тег <u> :
// Задача : Изменить код и изменить текст элемента.
// Помните, что всем этим тегам нужен закрывающий тег, чтобы определить конец элемента.
{
  /* <u>My Schedule</u>  */
}

//TODO: Practice: Text Formatting (Практика: Форматирование текста)
// Давайте добавим немного форматирования к нашему тексту!
// Задачи : 1. Создать заголовок над текстом с надписью « Эйфелева башня ».
// 2. Выделите важные слова и цифры в тексте жирным шрифтом: это « Эйфелева башня », « Париж », количество посетителей и количество ступеней.
// Подсказка : заголовок создается с помощью тега <h1>. Вы можете выделить слова жирным шрифтом, используя тег <strong> :
{
  /* <h1>Some title</h1> 
<p>some text with a <strong>bold</strong> word.</p> */
}

//TODO: Nesting (Вложение)
// Элементы могут быть размещены внутри других элементов. Это называется вложением. Например, у нас может быть жирное слово в абзаце:
// Как видите, элемент <b> вложен в элемент <p>.
// Измените код, чтобы отображался текст: «My name is», за которым следует ваше имя, выделенное жирным шрифтом.
{
  /* <p><b>HTML</b> is fun</p>  */
}

//TODO: Nesting (Вложение)
// Важно правильно вложить элементы. Вот пример неправильной вложенности:
// Теги должны открываться и закрываться таким образом, чтобы они находились внутри или снаружи друг друга.
// Задача: исправить приведенный выше код, чтобы создать правильную вложенность.
{
  /* <p><b>HTML is fun</p></b>  */
}

//TODO: Page Structure (Структура страницы)
// HTML-страница представляет собой комбинацию нескольких вложенных элементов. Базовая HTML-страница имеет следующую структуру:
{
  /* <html>
   <body>
   </body>
</html> */
}
// Тег <html> определяет страницу, а тег <body> определяет основной контент и содержит все элементы страницы, такие как абзацы, таблицы, списки и т.д.

//TODO: Page Structure (Структура страницы)
// Например, давайте включим абзац в <body> :
// Теперь у нас есть правильно отформатированная HTML-страница.
// Задача : изменить код, чтобы включить в текст ваше имя и возраст и выделить их жирным шрифтом.
{
  /* <html>
  <body>
    <p>some text</p>
  </body>
</html> */
}

//TODO: Page Structure (Структура страницы)
// Структуру HTML часто сравнивают с деревом.
// Тег <html> является корневым, а остальные элементы являются его дочерними элементами.
// В приведенном выше коде <body> является потомком <html>, а <p> — потомком <body>.
// Элемент, который включает в себя другие элементы, называется их родителем. Итак, <body> является родителем элемента <p>.

//TODO: Page Structure (Структура страницы)
// Давайте создадим страницу с заголовком и текстом:
// Задача: изменить код, чтобы включить некоторую информацию о вас, отформатированную с соответствующими тегами.
{
  /* <html>
  <body>
    <h1>My Page</h1>
    <p>Learning HTML</p>
  </body>
</html>
  */
}

//TODO: Page Structure (Структура страницы)
// Структура страницы позволяет браузеру понять и отобразить соответствующие элементы.
// Без этого содержимое будет отображаться как большой кусок без форматирования. Например:
// Запустите код, чтобы увидеть, как ведет себя необработанный текст, когда разметка не добавляется.
// Задача:
// Откройте текст и добавьте соответствующие теги форматирования, чтобы в результате получилась читаемая веб-статья.
// What is HTML HTML
// stands for HyperText Markup Language. It is a markup language and is used to define the structure and content of a web page.
// HTML elements are created using tags.

//TODO: Practice: Page Structure (Практика: Структура страницы)
// Чтобы сделать наш HTML корректной страницей, давайте добавим правильную структуру.
// Задача: Оберните содержимое тегами <html> и <body>, чтобы создать правильную разметку страницы.
// Подсказка: это пример правильной структуры:

//TODO: Attributes (Атрибуты)
// Теги могут иметь атрибуты, которые содержат дополнительную информацию об элементе. Например, атрибут align определяет выравнивание абзаца:
// Задача: Откройте код и измените атрибут align, чтобы выровнять текст по правому краю.
{
  /* <p align="center">some text</p> */
}

//TODO: Attributes (Атрибуты)
// Атрибуты имеют синтаксис name="value", ​​где name — это имя атрибута, а value — соответствующее значение. Атрибуты определены в открывающем теге:
// За именем атрибута должен следовать знак равенства.
{
  /* <p align="right">hello</p> */
}

//TODO: Attributes (Атрибуты)
// Значение атрибута должно быть заключено в одинарные или двойные кавычки. Убедитесь, что вы не смешиваете одинарные и двойные кавычки, например:
{
  /* <p align="center'>hey</p>  */
}
// Откройте код и исправьте атрибут.

//TODO: Links (Ссылки)
// Атрибуты используются для создания гиперссылок. Сделаем примерную ссылку:
// Тег <a> превращает заключенный в него текст в гиперссылку.
// Атрибут href указывает адрес ссылки.
// Откройте код и посмотрите на ссылку в действии.
{
  /* <a href="https://www.sololearn.com">Click here</a>  */
}

//TODO: Links (Ссылки)
// Элемент может иметь несколько атрибутов. Например:
{
  /* <a href="https://www.sololearn.com" target="_blank" title="Sololearn">Click here</a>  */
}
// Атрибут target указывает, как открыть ссылку. Со значением «_blank» он откроется в новой вкладке. Атрибут title определяет текст, который будет отображаться при наведении курсора на ссылку.
// Задача: изменить код, чтобы создать ссылку на ваш любимый веб-сайт.

//TODO: Images (Картинки)
// Некоторые элементы не имеют текстового содержимого и создаются с помощью одного открывающего тега. Например, чтобы вставить изображение на страницу:
// Атрибут src указывает адрес изображения, которое мы хотим встроить.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" >   */
}

//TODO: Images (Картинки)
// Атрибут alt используется для указания текста, который будет отображаться, если изображение не загрузится.
// Альтернативный текст действует как описание изображения.
// Используется в программах чтения с экрана, а также в поисковых системах, как описание изображения.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" >    */
}

//TODO: Images (Картинки)
// Вы также можете указать собственный размер изображения, используя атрибуты высоты и ширины :
// Если указано только одно измерение, другое будет регулироваться в соответствии с соотношением сторон изображения.
// Задача: Откройте код и измените изображение, чтобы оно имело высоту 300 пикселей.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" width="200px" >     */
}

//TODO: Size Attributes (Атрибуты размера)
// Атрибуты высоты и ширины также могут принимать процентные значения . Например, давайте изменим наше изображение так, чтобы оно занимало половину ширины страницы:
// Задача: изменить код, чтобы изображение занимало 25% ширины страницы.
// значок репозитория кода
// Время добавить изображение
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" width="50%" >  */
}

//TODO: Practice: HTML Attributes (Практика: HTML Атрибуты)
// Время добавить изображение на нашу страницу!
// Задачи: 1. Добавьте изображение сразу после заголовка со следующим источником: https://sololearnassets.azureedge.net/eiffel-tower.jpg
// 2. Измените размер изображения, чтобы оно занимало 30% ширины страницы. Подсказка: вот пример тега изображения:
{
  /* <img src="https://test.com/image.jpg" alt="Некоторое изображение" width="50%" ></img> */
}

//TODO: Empty Elements (Пустые элементы)
// Подобно <img>, существуют и другие пустые элементы, которые создаются с помощью одного открывающего тега. Элемент <hr> используется для создания горизонтальной линии:
// Элемент <hr> представляет собой тематический разрыв между элементами абзаца.
{
  /* <p>This is some text</p>
<hr>
<p>This is another text</p> */
}

//TODO: Line Break (Разрыв строки)
// Элемент <br> создает разрыв строки в абзаце.
// Без элементов <br> абзац отображался бы в одну строку.
// Задача: изменить код и создать абзац с вашей контактной информацией: имя, возраст и страна. Разделите их, используя разрывы строк.
{
  /* <p>
  A <br>
  B <br>
  C <br>
</p> */
}

//TODO: Whitespace (пробел)
// Пробелы и разрывы строк в коде игнорируются, но они используются для того, чтобы сделать код более читабельным.
// Например:
{
  /* <p> some text </p>
 <hr>
<p> some other text </p> */
}
// Здесь мы помещаем каждый новый элемент в новую строку, чтобы сделать код читабельным.
// Это дает тот же результат, что и размещение всего в одной строке:
{
  /* <p> some text </p><hr><p> some other text </p>  */
}
// Также распространено использование отступов для вложенных элементов, как мы видели в предыдущих примерах.

//TODO: Elements (Элементы)
// В HTML есть две важные категории элементов: элементы блочного уровня и встроенные элементы. Элементы уровня блока формируют видимый блок на странице и появляются на новой строке. Например, каждый элемент абзаца появляется с новой строки:
// Элементы уровня блока обычно представляют собой структурные элементы на странице, такие как заголовки, абзацы, списки, меню навигации или нижние колонтитулы.
{
  /* <p>hello</p>
<p>this is some text</p>
<p>this is another text</p> */
}

//TODO: Inline Elements (Встроенные элементы)
// Строчные элементы содержатся внутри блочных элементов и представляют собой лишь небольшие части страницы. Например: <a>, <b>, <strong> и подобные элементы являются встроенными элементами:
// Строчные элементы не должны содержать элементы блочного уровня.
{
  /* <p>
  A <b>link</b> to my <a href="https://www.sololearn.com">website</a>
</p> */
}

//TODO: Elements (Элементы)
// Теперь, когда мы знаем о блочных и встроенных элементах и ​​форматировании кода, давайте создадим пример HTML-кода для статьи:
// Как видите, HTML представляет собой набор блочных и встроенных элементов, содержащих текст и форматирование.
// Задача: изменить код и дополнить текст вашей информацией.
{
  /* <h1>About Me</h1>
<p>My name is <b>Bob</b>. I am a software engineer. <br>
I am 21 years old and live in New York.</p>
<p>Contact me on <a href="https://www.linkedin.com/">LinkedIn</a></p> */
}

//TODO: Elements (Элементы)
// В наших предыдущих примерах мы научились создавать гиперссылки из текстового содержимого с помощью тега <a>. Точно так же почти любой элемент можно сделать ссылкой. Например, мы можем сделать изображение ссылкой:
// Теперь при нажатии на изображение откроется ссылка.
// Задача: изменить код, чтобы ссылка открывалась в новой вкладке.
{
  /* <a href="https://www.google.com">
  <img src="http://www.sololearn.com/images/tree.jpg" >
</a>  */
}

//TODO: Practice: More on Elements (Практика: Подробнее об элементах)
// В этом упражнении мы сделаем изображение ссылкой на увеличенную версию.
// Задачи:
// 1. Сделать к изображению ссылку на адрес изображения.
// 2. Добавьте соответствующий атрибут, чтобы ссылка открывалась в новой вкладке. Подсказка: ссылка создается с помощью тега <a>. Чтобы он открывался в новой вкладке, используется целевой атрибут:
{
  /* <a href="https://test.com" target="_blank">
  some link
</a> */
}
// После добавления ссылки вы сможете нажать на изображение и открыть его увеличенную версию.

//TODO: Lists (Списки)
// В HTML есть два типа списков:
// - ordered list <ol> (упорядоченный список)
// - unordered list <ul> (неупорядоченные список).
// Ненумерованный список создается с помощью тега <ul>.
// Ненумерованный список состоит из элементов, отмеченных маркерами.

//TODO: Lists (Списки)
// Каждый элемент списка создается с помощью тега <li>.
// Вот примерный список товаров для покупок:
// Как видите, элементы помещаются между тегами <ul></ul> .
// Задача: изменить код и добавить некоторые элементы в список.
{
  /* <ul> 
  <li>Apples</li>
  <li>Milk</li>
  <li>Eggs</li>
</ul> */
}

//TODO: Lists (Списки)
// Элемент списка может содержать другие элементы, такие как ссылки, форматирование текста и т.д. Например:
// Задача: открыть код и выделить ссылки жирным шрифтом.
{
  /* <ul>
  <li><a href="https://www.facebook.com">Facebook</a></li>
  <li><a href="https://www.google.com">Google</a></li>
  <li><a href="https://www.linkedin.com">LinkedIn</a></li>
 </ul> */
}

//TODO: Lists (Списки)
// Упорядоченный список использует номера вместо маркеров для элементов. Он создается аналогично неупорядоченному списку и использует тег <ol> вместо <ul> для переноса элементов:
// Это создаст нумерованный список имен.
// Задача: открыть код и добавить свое имя в список.
{
  /* <ol>
  <li>Bob</li>
  <li>Amy</li>
  <li>Dave</li>
</ol> */
}

//TODO: Lists (Списки)
// Списки могут быть вложены в другие списки.
// Например:
{
  /* <ol>
  <li>Milk</li>
  <li>Apples
    <ul>
      <li>Red</li>
      <li>Green</li>
    </ul>
  </li>
  <li>Bananas</li>
</ol> */
}
// Как видите, неупорядоченный список вложен в элемент списка упорядоченного списка.
// Задача: открыть код и вложить еще один подсписок в упорядоченный список.

//TODO: Lists (Списки)
// Помните, что элементы списка должны открываться и закрываться с помощью тегов <li> </li> и должны быть заключены в теги <ul> или <ol>, чтобы список был корректным. Возьмем следующий контент:
// Задача: Составьте упорядоченный список из содержимого ниже, чтобы каждая строка была элементом списка.
// Turn left
// Turn right
// Make a U-turn
// You have arrived!

//TODO: Practice: Lists (Практика: Списки)
// Нам нужно добавить список способов добраться до башни на общественном транспорте.
// Задания:
// 1. После абзаца описания добавить еще один абзац жирным шрифтом с надписью «Transport».
// 2. Затем добавьте неупорядоченный список со следующими элементами:
// - Bus: lines 42, 69, 72, 82 and 87.
// - Metro: Trocadero, Ecole militaire.
// - Train: Champ de Mars - Tour Eiffel, line C.
// Подсказка: вот примерный список:
{
  /* <ul>
  <li>Bus</li>
  <li>Metro</li>
</ul>   */
}
// Вот ожидаемый результат раздела «Транспорт» :

//TODO: Tables (Таблицы)
// Таблица — это набор строк и столбцов.
// HTML поддерживает таблицы для отображения табличных данных (данных, структурированных по строкам и столбцам).
// Таблица создается с помощью тега <table>:
{
  /* <table>
</table> */
}

//TODO: Table Rows (Строки таблицы)
// Тег <table> должен включать тег <tr> Table Rows (Строки таблицы) для каждой строки таблицы.
{
  /* <table>
  <tr></tr>
  <tr></tr>
</table> */
}
// Приведенный выше код создает две строки в таблице.

//TODO: Table Cells (Ячейки таблицы)
// Тег <td> (table data) - создает ячейку таблицы, которая содержится внутри тега <tr> и содержит содержимое ячейки:
// Это создает таблицу с двумя строками, каждая из которых содержит две ячейки.
// Задача: Запустите код, чтобы увидеть результат и добавить в него новую строку с двумя ячейками, в которых указано ваше имя и возраст.
{
  /* <table>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table> */
}

//TODO: Tables (Таблицы)
// Большинство браузеров по умолчанию не включают границу для таблицы. Мы можем добавить границу, чтобы видеть ячейки, используя атрибут границы :
// Лучшее и более сложное оформление осуществляется с помощью CSS, который мы изучим в следующем модуле.
{
  /* <table border="1">
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}

//TODO: Headers (Заголовки)
// Тег <th> (teg header) похож на <td> и используется для добавления заголовка к таблице.
// Заголовок представляет собой набор <th> ячеек, которые определяют содержимое ячейки или строки. Они автоматически центрируются в ячейке и выделяются жирным шрифтом:
// Мы добавили новую строку и две <th> ячейки для заголовка, которые включают метки каждого столбца.
// Задача: Откройте код и добавьте в таблицу новый столбец Country.
{
  /* <table border="1">
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table> */
}

//TODO: Tables (Таблицы)
// Другим полезным атрибутом является colspan, который позволяет столбцу охватывать несколько ячеек. Например, давайте добавим верхнюю ячейку заголовка для нашей таблицы и сделаем так, чтобы она занимала 3 столбца:
// Атрибут colspan определяет количество ячеек, которые мы хотим охватить.
// Задача: Откройте код и добавьте в таблицу новую строку с вашей информацией.
{
  /* <table border="1">
  <tr>
    <th colspan="3">Users</th>
  </tr>
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Country</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
    <td>USA</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
    <td>Italy</td>
  </tr>
</table>  */
}

//TODO: Tables (Таблицы)
// Подобно охвату нескольких столбцов, ячейка также может охватывать несколько строк.
// Это достигается с помощью атрибута rowspan. Например, составим таблицу расписания:
// Задача: изменить код и добавить столбцы для других дней недели, чтобы включить ваше расписание.
{
  /* <table border="1">
  <tr>
    <th>Mon</th>
    <th>Tue</th>
    <th>Wed</th>
  </tr>
  <tr>
    <td>Soccer</td>
    <td rowspan="2">Free Time</td>
    <td>Math class</td>
  </tr>
  <tr>
    <td>Biology</td>
    <td>Travel</td>
  </tr>
</table>  */
}

//TODO: Practice: Tables (Практика: Таблицы)
// Как и в случае со списком транспорта, теперь нам нужно добавить таблицу, показывающую цены на билеты.
// Задача: добавить следующую таблицу после списка транспорта:
// Подсказка: таблица должна начинаться с тега <table>.
// Каждая строка начинается с тега <tr>, а ячейки таблицы представлены с помощью тегов <td>.
// Для заголовка таблицы используйте теги <th> вместо <td>.
// Чтобы сделать таблицу видимой, добавьте атрибут border="1" в тег <table>.

//TODO: Page Sections (Разделы страницы)
// В дополнение к созданию отдельных элементов страницы HTML также предоставляет элементы блочного уровня, используемые для определения разделов вашей страницы, таких как верхний и нижний колонтитулы, меню навигации и т.д. Большинство страниц имеют схожую структуру:
// См. Рис: PageSections.jpg
// Это общая структура страницы. Структура вашей страницы может отличаться, однако это всегда будет набор похожих «box-like» («коробчатых») элементов.

//TODO: Header (Заголовок)
// Шапка веб-сайта обычно представляет собой раздел в верхней части страницы, который может включать логотип, название и другие подобные элементы.
// Он также обычно используется на разных страницах веб-сайта. Чтобы определить раздел заголовка, используйте тег <header>:
// Заголовок может включать в себя другие элементы HTML, такие как изображения, ссылки и т.д.
{
  /* <header>
  <h1>this is my header</h1>
 </header> */
}

//TODO: Navigation Bar (Панель навигации)
// Панель навигации содержит ссылки или кнопки, ведущие на другие страницы вашего веб-сайта.
// Он определяется с помощью тега <nav>:
// Меню навигации также может быть частью заголовка и включать в себя любые другие элементы HTML.
// Задача: Изменить код и добавить реальные ссылки в меню навигации.
{
  /* <nav>
  <a href="#">link 1</a>
  <a href="#">link 2</a>
  <a href="#">link 3</a>
 </nav> */
}

//TODO: Main Content (Основное содержание)
// Основное содержимое страницы определяется с помощью тега <main>, который может включать в себя различные подразделы, представленные тегами <article> и <section>.
{
  /* <main>
  <article>
    <h2>some heading</h2>
    <p>some text</p>
  </article>
 </main> */
}
// <article> заключает в себе блок контента, который имеет смысл сам по себе без остальной части страницы, например пост в блоге.
// На странице должен быть один элемент <main>.

//TODO: Article and Section (Статья и раздел)
//<section> похож на <article>, но используется для группировки одной части страницы, которая представляет собой единый функциональный элемент, например карту или набор заголовков. Рекомендуется начинать каждый раздел с заголовка.
//Элемент статьи может иметь разные разделы, а раздел может включать разные статьи. Все зависит от структуры и содержания вашей страницы.

//TODO: Aside (В сторону)
// Элемент <aside> используется для определения контента, который не имеет прямого отношения к основному контенту, но может предоставлять дополнительную информацию, такую ​​как связанные ссылки или похожие статьи.
// Задача: Откройте код и добавьте к тексту форматирование текста (выделите число 42 и имена книг/авторов жирным шрифтом и т.д.).
{
  /* <aside>
  <h2>Did you know?</h2>

  <p>The number 42 is, in The Hitchhiker's Guide to the Galaxy by Douglas Adams, the "Answer to the Ultimate Question of Life, the Universe, and Everything," calculated by an enormous supercomputer named Deep Thought over a period of 7.5 million years.</p>
</aside> */
}

//TODO: Footer (Нижний колонтитул)
// Нижний колонтитул находится в конце страницы. Он может содержать ссылки, примечания об авторских правах и т.д. и создается с помощью тега <footer>:
// Как и верхний колонтитул, нижний колонтитул обычно используется на разных страницах веб-сайта.
{
  /* <footer>
  <p align="center">Copyright</p>
 </footer> */
}

//TODO: Page Sections (Разделы страницы)
// В ситуациях, когда вы просто хотите сгруппировать элементы без какого-либо конкретного значения, вы можете использовать тег <div>.
// <div> является элементом уровня блока и действует как контейнер для других элементов.
// В следующем модуле мы увидим, как использовать CSS для стилизации элементов в контейнере.
{
  /* <div>
  <h1>some title</h1>
  <p>some text</p>
  <a href="#">some link</a>
</div> */
}

//TODO: Page Sections (Разделы страницы)
// Все эти элементы используются для структурирования страницы.
// Они не добавляют никакого стиля или форматирования, а представляют собой невидимые «boxes», в которых находится контент и другие элементы сайта. Важно создать правильную структуру страницы, поскольку поисковые системы и программы чтения с экрана используют ее для чтения содержимого страницы и понимания ее структуры.
// Мы также увидим, как использовать CSS для оформления страницы в следующем модуле.

//TODO: Practice: Page Sections (Практика: Разделы страницы)
// Теперь пришло время обернуть наш контент в соответствующие элементы, чтобы позже мы могли их стилизовать.
// Задачи:
// 1. Обернуть весь контент, который сейчас находится под тегом <body>, в тег <section>.
// 2. Добавьте элемент <footer> после <section> с текстом «Copyright».
// Мы стилизуем разделы позже, в модуле CSS.

//TODO: Forms (Формы)
// Формы позволяют пользователям вводить данные, которые обрабатываются сайтом.
// Форма содержит элементы управления, в том числе текстовые поля, кнопки, флажки и т.д. Элементы формы содержатся внутри тега <form>:
{
  /* <form>
</form>  */
}
// Элемент <form> действует как контейнер для своих элементов.

//TODO: Textbox (Текстовое окно)
// Элемент ввода позволяет создавать различные элементы формы.
// Атрибут type определяет тип элемента. Например, давайте сделаем текстовое поле:
// Позже в курсе мы узнаем, как получить значение текстового поля с помощью JavaScript.
{
  /* <form>
  <input type="text" >
</form>   */
}

//TODO: Input (Ввод)
// Элемент ввода поддерживает различные типы. Например:
// Типы определяют содержимое со значением, которое ожидает ввод. Делает открытой клавиатуру с соответствующей раскладкой, например, а для телефонного ввода автоматически открывает цифры.
// Запустите код и посмотрите, как меняется раскладка клавиатуры для разных типов ввода.
{
  /* <form>
  <input type="text" >
  <input type="email" >
  <input type="tel" >
</form>   */
}

//TODO: Labels (Ярлыки)
// Элементы формы могут иметь метки.
// Чтобы присвоить элементу метку, сначала нужно добавить к нему атрибут id:
{
  /* <input type="text" id="name"></input> */
}
// Значение атрибута id должно быть уникальным на странице.

//TODO: Labels (Ярлыки)
// Теперь мы можем создать элемент <label> и связать его с созданным нами идентификатором:
{
  /* <label for="name">Name</label>
<input type="text" id="name"></input> */
}
// Обратите внимание, что атрибут for используется для связывания метки с идентификатором элемента формы.

//TODO: Labels (Ярлыки)
// Ярлыки — это не просто описания полей, они также кликабельны: когда вы щелкаете по ярлыку, связанный с ним элемент формы автоматически фокусируется. Давайте добавим несколько меток в нашу форму:
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name"> <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email">
</form>    */
}
// Задача: Откройте код и добавьте еще одно текстовое поле для номера телефона с его меткой.

//TODO: Placeholder (Заполнитель)
// Текстовые поля также могут иметь замещающий текст, описывающий значение, ожидаемое полем. Давайте добавим заполнители к нашим полям:
// Запустите код и посмотрите на заполнители в действии!
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
</form>  */
}

//TODO: Practice: Forms (Практика: Формы)
// Теперь мы можем создать раздел, чтобы пользователи могли покупать билеты. Задачи:
// 1. Добавить новый раздел <section> ниже первого, но выше нижнего колонтитула.
// 2. Создайте в этом разделе форму, которая включает два текстовых поля и соответствующие им метки. (один билет для взрослых, другой для детей).
// 3. Используйте числовой тип для входных данных.
// 4. Используйте тег <br>, чтобы разделить текстовые поля на отдельные строки. Подсказка: Вот пример формы с полем ввода и его меткой:
{
  /* <label for="name">Name</label>
<input type="number" id="name">  */
}

//TODO: Checkboxes (Флажки)
// Элемент ввода можно использовать для создания флажков.
// Например:
// Мы разместили метки после вводов, чтобы они отображались рядом с флажками справа.
{
  /* <form>
   <h2>Choose your interests:</h2>
  <input type="checkbox" id="tech">
  <label for="tech">Tech</label><br>
  
  <input type="checkbox" id="sports">
  <label for="sports">Sports</label><br>

  <input type="checkbox" id="books">
  <label for="books">Books</label>  
</form>  */
}

//TODO: Radio Buttons (Радио-кнопки)
// Мы также можем сделать радиокнопки, чтобы можно было отметить только одну из них. Чтобы сгруппировать переключатели, мы должны дать им одно и то же имя, используя атрибут name:
// Все радиокнопки имеют одинаковое имя.
// Теперь можно выбрать только один из вариантов.
{
  /* <form>
  <h2>Title:</h2>
  <input type="radio" name="title" id="mr">
  <label for="mr">Mr</label><br>
  
  <input type="radio" name="title" id="ms">
  <label for="ms">Ms</label><br>

  <input type="radio" name="title" id="mrs">
  <label for="mrs">Mrs</label>
</form> */
}

//TODO: Textarea (Текстовое поле)
// Элемент ввода используется для ввода одной строки текста.
// Чтобы сделать многострочное поле ввода, используйте элемент <textarea>:
// Задача: Добавить метку к текстовому полю.
// Обратите внимание, что текстовая область должна иметь закрывающий тег.
{
  /* <textarea id="message">
</textarea> */
}

//TODO: Drop-down (Раскрывающийся список)
// Раскрывающийся список позволяет пользователям выбрать один из нескольких вариантов.
// Его можно создать с помощью элемента <select>:
// Каждый параметр в раскрывающемся списке является элементом <option>.
// Задача: изменить код и добавить еще несколько параметров в раскрывающийся список.
{
  /* <form>
  <select>
    <option>Red</option>
    <option>Blue</option>
    <option>Orange</option>
  </select>
</form> */
}

//TODO: Buttons (Кнопки)
// Кнопки можно создавать с помощью элемента <button>:
// Нажатие на кнопку сейчас ничего не даст.
// Нам нужен JavaScript для добавления функциональности на страницу.
// Мы узнаем, как это сделать позже в курсе.
{
  /* <form>
  <button>Send</button>
</form> */
}

//TODO: Buttons (Кнопки)
// Кнопки также можно создавать с помощью элемента ввода:
// Тип сброса сбрасывает поля формы при нажатии.
// Обратите внимание, что текст кнопки предоставляется с использованием атрибута value.
{
  /* <form>
  <input type="text">
  <input type="button" value="Send">
  <input type="reset" value="Reset"> 
</form> */
}

//TODO: Contact Form (Форма обратной связи)
// Давайте создадим настоящую контактную форму, используя элементы, которые мы изучили:
// Задача: изменить код, добавить поле электронной почты, кнопку сброса и заполнители для всех полей.
{
  /* <form>
  <h2>Contact Us</h2>
  <label for="type">Type: </label>
  <select id="type">
    <option>General</option>
    <option>Payment Issue</option>
    <option>Other</option>
  </select><br><br>
  <label for="name">Name: </label>
  <input type="text" id="name"><br><br>
  <label for="message">Message: </label><br>
  <textarea></textarea><br>
  <input type="button" value="Send">
</form>   */
}

//TODO: More Form Controls  Practice: (Практика: Дополнительные элементы управления формой)
// Нам нужно добавить в нашу форму кнопку, которая будет рассчитывать стоимость билетов.
// Задача: Добавить кнопку с текстом "Buy" (Купить) в конце формы. Подсказка: Вот пример кнопки:
{
  /* <input type="button" value="Buy"></input> */
}
// Отделите кнопку от ввода над ней с помощью тегов <br>, чтобы получить следующий результат:

//TODO: Special Characters (Специальные символы)
// В HTML символы <, >,",' и & являются специальными символами и являются частью самого синтаксиса HTML. Но что, если мы хотим включить эти специальные символы в наш текст? Например, мы хотим включить <and> знаки в абзаце:
// Это нарушит нашу разметку, так как знаки <and> интерпретируются как тег HTML.
{
  /* <p> A paragraph is created using the <p> tag </p>  */
}

//TODO: Special Characters (Специальные символы)
// Чтобы включить в текст специальные символы, нам нужно использовать ссылки на символы.
// Это специальные коды, представляющие символы; они начинаются с амперсанда (&) и заканчиваются точкой с запятой (;). Знак < представлен с помощью & lt; в то время как > представлен & gt;
// Запустите код, чтобы увидеть результат!
{
  /* <p> A paragraph is created using the &lt;p&gt; tag </p>  */
}

//TODO: Special Characters (Специальные символы)
// Вот список символов с соответствующими кодами ссылок:
// См. Рис: SpecialCharacter.png
// Коды можно запомнить, потому что они используют описательный текст:
// - lt означает меньше,
// - gt - больше и т.д.

//TODO: Special Characters (Специальные символы)
// Другой часто используемый символ в HTML — неразрывный пробел .
// Это пространство, которое не будет переходить на новую строку и создается с помощью & NBSP; . Два слова, разделенные неразрывным пробелом, будут слипаться. Например:
{
  /* <b>Speed:</b> 42&nbsp;mph */
}
// Еще одно распространенное использование неразрывного пробела — запретить браузерам обрезать пробелы на HTML-страницах.
// Если вы напишете в тексте 5 пробелов, браузер удалит 4 из них, но если вы используете 10 неразрывных пробелов, все они сохранятся.

//TODO: Comments (Комментарии)
// Вы можете добавлять комментарии к своему HTML-коду.
// Браузер не отображает комментарии, но они помогают документировать HTML и добавлять описания, напоминания и другие примечания. Комментарий должен быть помещен внутри <!-- и --> :
// <!-- Your comment goes here -->

//TODO: Comments (Комментарии)
// Вы также можете закомментировать элементы.
// Это заставляет их исчезнуть со страницы, но остаться в коде.
// Второй абзац не будет отображаться в выводе.
// Это может быть полезно, если у вас есть незавершенный код или вы пока не хотите удалять код со страницы.
{
  /* <p>some text</p>
 <!-- <p>some other text</p> --> */
}

//TODO: Special Characters Practice: (Практика: Специальные символы)
// В HTML доступно множество специальных символов.
// Одним из них является знак авторского права. Он имеет код: &copy;
// Задача: Поместите символ авторского права перед текстом Copyright в нижнем колонтитуле. Вот ожидаемый результат:
