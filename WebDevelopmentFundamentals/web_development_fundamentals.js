//TODO: Web Development Fundamentals (Основы веб-разработки)
// Курс «Основы веб-разработки» охватывает основы основных технологий, необходимые для создания веб-страниц, включая HTML, CSS и JavaScript. В качестве курсового проекта мы создадим с нуля функциональный веб-сайт по продаже билетов. Курс «Основы веб-разработки» не требует предварительного опыта программирования, так что давайте приступим прямо сейчас!)

//TODO: Web Development (Веб-разработка)
// Строительными блоками всех веб-страниц являются HTML, CSS и JavaScript . HTML — это язык разметки, который используется для того, чтобы сообщить браузеру, какова структура и содержимое веб-страницы. Посмотрите этот простой HTML- код, чтобы создать абзац текста:
{
  /* <p>Hello Vitaly</p> */
}
// Нажмите на код и измените текст в коде, чтобы показать свое имя, затем запустите код, чтобы увидеть результат.

//TODO: HTML (HTML)
// HTML состоит из различных элементов, которые определяют поведение содержимого страницы. Наш пример кода создает элемент абзаца:
// Некоторые другие примеры элементов включают изображения, заголовки, ссылки и т.д.
{
  /* <p>Hello there</p>  */
}

//TODO: HTML Elements (HTML-элементы)
// HTML-элемент создается с помощью тегов . Например, чтобы сделать абзац, мы должны заключить его в тег абзаца :
{
  /* <p>I am learning HTML</p>  */
}
// Тег <p> используется для определения абзаца текста.

//TODO: HTML Elements (HTML-элементы)
// Давайте снова посмотрим на код:
{
  /* <p>I am learning HTML</p>  */
}
// <p> — открывающий тег абзаца. Он определяет начало элемента.
// Элемент должен быть закрыт с помощью тега </p>, который используется для определения конца элемента. Обратите внимание на косую черту в теге — она используется для определения закрывающего тега.
// Текст между открывающим и закрывающим тегами является содержимым элемента.
// Эти компоненты составляют полноценный HTML-элемент.

//TODO: HTML Elements (HTML-элементы)
// Теперь, когда пользователь открывает страницу с помощью браузера, он будет обрабатывать заданные элементы и отображать содержимое для пользователя. Таким образом, элемент <p>I am learning HTML</p> будет отображаться для пользователя как простая строка текста без тегов: I am learning HTML
// Откройте текст выше и сделайте его допустимым элементом абзаца.

//TODO: HTML Elements (HTML-элементы)
// Важно использовать правильные имена тегов и скобки.
// Если вы сделаете опечатку в теге, браузер не сможет ее обработать и будет просто считать текстом. Например:
// Исправьте код, чтобы создать допустимый абзац текста.
// [par] some text [/par]
{
  /* <p>some text</p>   */
}

//TODO: Your First HTML (Ваш первый HTML)
// HTML-страница может содержать несколько элементов. Например, давайте создадим два абзаца:
// Помните, что каждому открывающему тегу <p> нужен закрывающий тег.
// Измените код и создайте карточку профиля с вашей информацией в следующем формате:
// Name: your name
// Age: your age
// Nationality: your nationality
{
  /* <p>I am learning HTML</p>
<p>HTML is fun</p>  */
}

//TODO: Practice: Welcome to Code Repo! (Практика: Добро пожаловать в репозиторий кода!)
// В этом проекте мы создадим сайт продажи билетов на Эйфелеву башню в Париже!
// Мы начнем с базовой веб-структуры, затем стилизуем страницу и создадим раздел расчета стоимости билетов. Давайте начнем с базового HTML!
// Задача: Код содержит текст краткого описания Эйфелевой башни. Оберните текст тегами абзаца. Добавьте новый абзац там, где вы видите разрыв строки (вы должны сделать 3 абзаца).
// Подсказка: абзац должен начинаться с тега <p> и заканчиваться закрывающим тегом </p>. Например:

//TODO: Headings (Заголовки)
// Тег <h1> используется для создания заголовка нашей страницы:
// Теперь текст My Website будет заголовком нашей страницы.
// Задача : изменить код и сделать текст «HTML is fun» заголовком.
{
  /* <h1>My Website</h1>  */
}

//TODO: Headings (Заголовки)
// Веб-страница может иметь несколько заголовков и подзаголовков.
// Для этого HTML предоставляет 6 различных тегов заголовков: от <h1> до <h6> . Например:
// <h1> — самый важный заголовок, а <h6> — наименее важный.

//TODO: Headings (Заголовки)
// Лучше всего иметь на странице один элемент <h1> , который определяет основной заголовок, а другой элемент заголовка использовать для других заголовков на странице.
// Задача : Откройте код и заполните его своей информацией.
// <h1> по умолчанию является самым большим заголовком, а <h6> — самым маленьким.

//TODO: Text Formatting (Форматирование текста)
// Для форматирования текста доступно несколько тегов. Тег <b> используется для выделения текста жирным шрифтом:
// Откройте код и измените текст, чтобы ваше имя было жирным.
{
  /* <b>A bold text</b> */
}

//TODO: Important Text (Важный текст)
// Тег <strong> используется для обозначения важности текста.
// С точки зрения стиля, он также делает текст жирным, однако его цель не просто сделать текст жирным, а продемонстрировать его важность по сравнению с соседним текстом.
{
  /* <strong>Warning!</strong>  */
}

//TODO: <strong> vs <b></b> (<strong> против <b>)
// Таким образом, мы можем сделать текст жирным, используя теги <b> и <strong>.
// Но какой из них мы должны использовать? Элемент <strong> предназначен для содержимого, которое имеет «большую важность», например предупреждения и оповещения. Элемент <b> предназначен для контента, который мы хотим выделить в предложении.
// Тег <strong> используется, чтобы сделать его семантически важным, в то время как <b> просто выделяет текст жирным шрифтом.

//TODO: Italic and Emphasis (Курсив и выделение)
// Тег <i> используется для выделения текста курсивом:
// Задача : изменить код, чтобы ваше имя было выделено курсивом. Вы также можете выделить текст курсивом, используя тег <em>, который используется для выделения акцента.
// Тег <em> предназначен для слов с ударением по сравнению с окружающим текстом.
{
  /* <i>some text</i>  */
}

//TODO: Underline (Подчеркнуть)
// Чтобы подчеркнуть текст, используйте тег <u> :
// Задача : Изменить код и изменить текст элемента.
// Помните, что всем этим тегам нужен закрывающий тег, чтобы определить конец элемента.
{
  /* <u>My Schedule</u>  */
}

//TODO: Practice: Text Formatting (Практика: Форматирование текста)
// Давайте добавим немного форматирования к нашему тексту!
// Задачи : 1. Создать заголовок над текстом с надписью « Эйфелева башня ».
// 2. Выделите важные слова и цифры в тексте жирным шрифтом: это « Эйфелева башня », « Париж », количество посетителей и количество ступеней.
// Подсказка : заголовок создается с помощью тега <h1>. Вы можете выделить слова жирным шрифтом, используя тег <strong> :
{
  /* <h1>Some title</h1> 
<p>some text with a <strong>bold</strong> word.</p> */
}

//TODO: Nesting (Вложение)
// Элементы могут быть размещены внутри других элементов. Это называется вложением. Например, у нас может быть жирное слово в абзаце:
// Как видите, элемент <b> вложен в элемент <p>.
// Измените код, чтобы отображался текст: «My name is», за которым следует ваше имя, выделенное жирным шрифтом.
{
  /* <p><b>HTML</b> is fun</p>  */
}

//TODO: Nesting (Вложение)
// Важно правильно вложить элементы. Вот пример неправильной вложенности:
// Теги должны открываться и закрываться таким образом, чтобы они находились внутри или снаружи друг друга.
// Задача: исправить приведенный выше код, чтобы создать правильную вложенность.
{
  /* <p><b>HTML is fun</p></b>  */
}

//TODO: Page Structure (Структура страницы)
// HTML-страница представляет собой комбинацию нескольких вложенных элементов. Базовая HTML-страница имеет следующую структуру:
{
  /* <html>
   <body>
   </body>
</html> */
}
// Тег <html> определяет страницу, а тег <body> определяет основной контент и содержит все элементы страницы, такие как абзацы, таблицы, списки и т.д.

//TODO: Page Structure (Структура страницы)
// Например, давайте включим абзац в <body> :
// Теперь у нас есть правильно отформатированная HTML-страница.
// Задача : изменить код, чтобы включить в текст ваше имя и возраст и выделить их жирным шрифтом.
{
  /* <html>
  <body>
    <p>some text</p>
  </body>
</html> */
}

//TODO: Page Structure (Структура страницы)
// Структуру HTML часто сравнивают с деревом.
// Тег <html> является корневым, а остальные элементы являются его дочерними элементами.
// В приведенном выше коде <body> является потомком <html>, а <p> — потомком <body>.
// Элемент, который включает в себя другие элементы, называется их родителем. Итак, <body> является родителем элемента <p>.

//TODO: Page Structure (Структура страницы)
// Давайте создадим страницу с заголовком и текстом:
// Задача: изменить код, чтобы включить некоторую информацию о вас, отформатированную с соответствующими тегами.
{
  /* <html>
  <body>
    <h1>My Page</h1>
    <p>Learning HTML</p>
  </body>
</html>
  */
}

//TODO: Page Structure (Структура страницы)
// Структура страницы позволяет браузеру понять и отобразить соответствующие элементы.
// Без этого содержимое будет отображаться как большой кусок без форматирования. Например:
// Запустите код, чтобы увидеть, как ведет себя необработанный текст, когда разметка не добавляется.
// Задача:
// Откройте текст и добавьте соответствующие теги форматирования, чтобы в результате получилась читаемая веб-статья.
// What is HTML HTML
// stands for HyperText Markup Language. It is a markup language and is used to define the structure and content of a web page.
// HTML elements are created using tags.

//TODO: Practice: Page Structure (Практика: Структура страницы)
// Чтобы сделать наш HTML корректной страницей, давайте добавим правильную структуру.
// Задача: Оберните содержимое тегами <html> и <body>, чтобы создать правильную разметку страницы.
// Подсказка: это пример правильной структуры:

//TODO: Attributes (Атрибуты)
// Теги могут иметь атрибуты, которые содержат дополнительную информацию об элементе. Например, атрибут align определяет выравнивание абзаца:
// Задача: Откройте код и измените атрибут align, чтобы выровнять текст по правому краю.
{
  /* <p align="center">some text</p> */
}

//TODO: Attributes (Атрибуты)
// Атрибуты имеют синтаксис name="value", ​​где name — это имя атрибута, а value — соответствующее значение. Атрибуты определены в открывающем теге:
// За именем атрибута должен следовать знак равенства.
{
  /* <p align="right">hello</p> */
}

//TODO: Attributes (Атрибуты)
// Значение атрибута должно быть заключено в одинарные или двойные кавычки. Убедитесь, что вы не смешиваете одинарные и двойные кавычки, например:
{
  /* <p align="center'>hey</p>  */
}
// Откройте код и исправьте атрибут.

//TODO: Links (Ссылки)
// Атрибуты используются для создания гиперссылок. Сделаем примерную ссылку:
// Тег <a> превращает заключенный в него текст в гиперссылку.
// Атрибут href указывает адрес ссылки.
// Откройте код и посмотрите на ссылку в действии.
{
  /* <a href="https://www.sololearn.com">Click here</a>  */
}

//TODO: Links (Ссылки)
// Элемент может иметь несколько атрибутов. Например:
{
  /* <a href="https://www.sololearn.com" target="_blank" title="Sololearn">Click here</a>  */
}
// Атрибут target указывает, как открыть ссылку. Со значением «_blank» он откроется в новой вкладке. Атрибут title определяет текст, который будет отображаться при наведении курсора на ссылку.
// Задача: изменить код, чтобы создать ссылку на ваш любимый веб-сайт.

//TODO: Images (Картинки)
// Некоторые элементы не имеют текстового содержимого и создаются с помощью одного открывающего тега. Например, чтобы вставить изображение на страницу:
// Атрибут src указывает адрес изображения, которое мы хотим встроить.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" >   */
}

//TODO: Images (Картинки)
// Атрибут alt используется для указания текста, который будет отображаться, если изображение не загрузится.
// Альтернативный текст действует как описание изображения.
// Используется в программах чтения с экрана, а также в поисковых системах, как описание изображения.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" >    */
}

//TODO: Images (Картинки)
// Вы также можете указать собственный размер изображения, используя атрибуты высоты и ширины :
// Если указано только одно измерение, другое будет регулироваться в соответствии с соотношением сторон изображения.
// Задача: Откройте код и измените изображение, чтобы оно имело высоту 300 пикселей.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" width="200px" >     */
}

//TODO: Size Attributes (Атрибуты размера)
// Атрибуты высоты и ширины также могут принимать процентные значения . Например, давайте изменим наше изображение так, чтобы оно занимало половину ширины страницы:
// Задача: изменить код, чтобы изображение занимало 25% ширины страницы.
// значок репозитория кода
// Время добавить изображение
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" width="50%" >  */
}

//TODO: Practice: HTML Attributes (Практика: HTML Атрибуты)
// Время добавить изображение на нашу страницу!
// Задачи: 1. Добавьте изображение сразу после заголовка со следующим источником: https://sololearnassets.azureedge.net/eiffel-tower.jpg
// 2. Измените размер изображения, чтобы оно занимало 30% ширины страницы. Подсказка: вот пример тега изображения:
{
  /* <img src="https://test.com/image.jpg" alt="Некоторое изображение" width="50%" ></img> */
}

//TODO: Empty Elements (Пустые элементы)
// Подобно <img>, существуют и другие пустые элементы, которые создаются с помощью одного открывающего тега. Элемент <hr> используется для создания горизонтальной линии:
// Элемент <hr> представляет собой тематический разрыв между элементами абзаца.
{
  /* <p>This is some text</p>
<hr>
<p>This is another text</p> */
}

//TODO: Line Break (Разрыв строки)
// Элемент <br> создает разрыв строки в абзаце.
// Без элементов <br> абзац отображался бы в одну строку.
// Задача: изменить код и создать абзац с вашей контактной информацией: имя, возраст и страна. Разделите их, используя разрывы строк.
{
  /* <p>
  A <br>
  B <br>
  C <br>
</p> */
}

//TODO: Whitespace (пробел)
// Пробелы и разрывы строк в коде игнорируются, но они используются для того, чтобы сделать код более читабельным.
// Например:
{
  /* <p> some text </p>
 <hr>
<p> some other text </p> */
}
// Здесь мы помещаем каждый новый элемент в новую строку, чтобы сделать код читабельным.
// Это дает тот же результат, что и размещение всего в одной строке:
{
  /* <p> some text </p><hr><p> some other text </p>  */
}
// Также распространено использование отступов для вложенных элементов, как мы видели в предыдущих примерах.

//TODO: Elements (Элементы)
// В HTML есть две важные категории элементов: элементы блочного уровня и встроенные элементы. Элементы уровня блока формируют видимый блок на странице и появляются на новой строке. Например, каждый элемент абзаца появляется с новой строки:
// Элементы уровня блока обычно представляют собой структурные элементы на странице, такие как заголовки, абзацы, списки, меню навигации или нижние колонтитулы.
{
  /* <p>hello</p>
<p>this is some text</p>
<p>this is another text</p> */
}

//TODO: Inline Elements (Встроенные элементы)
// Строчные элементы содержатся внутри блочных элементов и представляют собой лишь небольшие части страницы. Например: <a>, <b>, <strong> и подобные элементы являются встроенными элементами:
// Строчные элементы не должны содержать элементы блочного уровня.
{
  /* <p>
  A <b>link</b> to my <a href="https://www.sololearn.com">website</a>
</p> */
}

//TODO: Elements (Элементы)
// Теперь, когда мы знаем о блочных и встроенных элементах и ​​форматировании кода, давайте создадим пример HTML-кода для статьи:
// Как видите, HTML представляет собой набор блочных и встроенных элементов, содержащих текст и форматирование.
// Задача: изменить код и дополнить текст вашей информацией.
{
  /* <h1>About Me</h1>
<p>My name is <b>Bob</b>. I am a software engineer. <br>
I am 21 years old and live in New York.</p>
<p>Contact me on <a href="https://www.linkedin.com/">LinkedIn</a></p> */
}

//TODO: Elements (Элементы)
// В наших предыдущих примерах мы научились создавать гиперссылки из текстового содержимого с помощью тега <a>. Точно так же почти любой элемент можно сделать ссылкой. Например, мы можем сделать изображение ссылкой:
// Теперь при нажатии на изображение откроется ссылка.
// Задача: изменить код, чтобы ссылка открывалась в новой вкладке.
{
  /* <a href="https://www.google.com">
  <img src="http://www.sololearn.com/images/tree.jpg" >
</a>  */
}

//TODO: Practice: More on Elements (Практика: Подробнее об элементах)
// В этом упражнении мы сделаем изображение ссылкой на увеличенную версию.
// Задачи:
// 1. Сделать к изображению ссылку на адрес изображения.
// 2. Добавьте соответствующий атрибут, чтобы ссылка открывалась в новой вкладке. Подсказка: ссылка создается с помощью тега <a>. Чтобы он открывался в новой вкладке, используется целевой атрибут:
{
  /* <a href="https://test.com" target="_blank">
  some link
</a> */
}
// После добавления ссылки вы сможете нажать на изображение и открыть его увеличенную версию.

//TODO: Lists (Списки)
// В HTML есть два типа списков:
// - ordered list <ol> (упорядоченный список)
// - unordered list <ul> (неупорядоченные список).
// Ненумерованный список создается с помощью тега <ul>.
// Ненумерованный список состоит из элементов, отмеченных маркерами.

//TODO: Lists (Списки)
// Каждый элемент списка создается с помощью тега <li>.
// Вот примерный список товаров для покупок:
// Как видите, элементы помещаются между тегами <ul></ul> .
// Задача: изменить код и добавить некоторые элементы в список.
{
  /* <ul> 
  <li>Apples</li>
  <li>Milk</li>
  <li>Eggs</li>
</ul> */
}

//TODO: Lists (Списки)
// Элемент списка может содержать другие элементы, такие как ссылки, форматирование текста и т.д. Например:
// Задача: открыть код и выделить ссылки жирным шрифтом.
{
  /* <ul>
  <li><a href="https://www.facebook.com">Facebook</a></li>
  <li><a href="https://www.google.com">Google</a></li>
  <li><a href="https://www.linkedin.com">LinkedIn</a></li>
 </ul> */
}

//TODO: Lists (Списки)
// Упорядоченный список использует номера вместо маркеров для элементов. Он создается аналогично неупорядоченному списку и использует тег <ol> вместо <ul> для переноса элементов:
// Это создаст нумерованный список имен.
// Задача: открыть код и добавить свое имя в список.
{
  /* <ol>
  <li>Bob</li>
  <li>Amy</li>
  <li>Dave</li>
</ol> */
}

//TODO: Lists (Списки)
// Списки могут быть вложены в другие списки.
// Например:
{
  /* <ol>
  <li>Milk</li>
  <li>Apples
    <ul>
      <li>Red</li>
      <li>Green</li>
    </ul>
  </li>
  <li>Bananas</li>
</ol> */
}
// Как видите, неупорядоченный список вложен в элемент списка упорядоченного списка.
// Задача: открыть код и вложить еще один подсписок в упорядоченный список.

//TODO: Lists (Списки)
// Помните, что элементы списка должны открываться и закрываться с помощью тегов <li> </li> и должны быть заключены в теги <ul> или <ol>, чтобы список был корректным. Возьмем следующий контент:
// Задача: Составьте упорядоченный список из содержимого ниже, чтобы каждая строка была элементом списка.
// Turn left
// Turn right
// Make a U-turn
// You have arrived!

//TODO: Practice: Lists (Практика: Списки)
// Нам нужно добавить список способов добраться до башни на общественном транспорте.
// Задания:
// 1. После абзаца описания добавить еще один абзац жирным шрифтом с надписью «Transport».
// 2. Затем добавьте неупорядоченный список со следующими элементами:
// - Bus: lines 42, 69, 72, 82 and 87.
// - Metro: Trocadero, Ecole militaire.
// - Train: Champ de Mars - Tour Eiffel, line C.
// Подсказка: вот примерный список:
{
  /* <ul>
  <li>Bus</li>
  <li>Metro</li>
</ul>   */
}
// Вот ожидаемый результат раздела «Транспорт» :

//TODO: Tables (Таблицы)
// Таблица — это набор строк и столбцов.
// HTML поддерживает таблицы для отображения табличных данных (данных, структурированных по строкам и столбцам).
// Таблица создается с помощью тега <table>:
{
  /* <table>
</table> */
}

//TODO: Table Rows (Строки таблицы)
// Тег <table> должен включать тег <tr> Table Rows (Строки таблицы) для каждой строки таблицы.
{
  /* <table>
  <tr></tr>
  <tr></tr>
</table> */
}
// Приведенный выше код создает две строки в таблице.

//TODO: Table Cells (Ячейки таблицы)
// Тег <td> (table data) - создает ячейку таблицы, которая содержится внутри тега <tr> и содержит содержимое ячейки:
// Это создает таблицу с двумя строками, каждая из которых содержит две ячейки.
// Задача: Запустите код, чтобы увидеть результат и добавить в него новую строку с двумя ячейками, в которых указано ваше имя и возраст.
{
  /* <table>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table> */
}

//TODO: Tables (Таблицы)
// Большинство браузеров по умолчанию не включают границу для таблицы. Мы можем добавить границу, чтобы видеть ячейки, используя атрибут границы :
// Лучшее и более сложное оформление осуществляется с помощью CSS, который мы изучим в следующем модуле.
{
  /* <table border="1">
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}

//TODO: Headers (Заголовки)
// Тег <th> (teg header) похож на <td> и используется для добавления заголовка к таблице.
// Заголовок представляет собой набор <th> ячеек, которые определяют содержимое ячейки или строки. Они автоматически центрируются в ячейке и выделяются жирным шрифтом:
// Мы добавили новую строку и две <th> ячейки для заголовка, которые включают метки каждого столбца.
// Задача: Откройте код и добавьте в таблицу новый столбец Country.
{
  /* <table border="1">
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table> */
}

//TODO: Tables (Таблицы)
// Другим полезным атрибутом является colspan, который позволяет столбцу охватывать несколько ячеек. Например, давайте добавим верхнюю ячейку заголовка для нашей таблицы и сделаем так, чтобы она занимала 3 столбца:
// Атрибут colspan определяет количество ячеек, которые мы хотим охватить.
// Задача: Откройте код и добавьте в таблицу новую строку с вашей информацией.
{
  /* <table border="1">
  <tr>
    <th colspan="3">Users</th>
  </tr>
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Country</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
    <td>USA</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
    <td>Italy</td>
  </tr>
</table>  */
}

//TODO: Tables (Таблицы)
// Подобно охвату нескольких столбцов, ячейка также может охватывать несколько строк.
// Это достигается с помощью атрибута rowspan. Например, составим таблицу расписания:
// Задача: изменить код и добавить столбцы для других дней недели, чтобы включить ваше расписание.
{
  /* <table border="1">
  <tr>
    <th>Mon</th>
    <th>Tue</th>
    <th>Wed</th>
  </tr>
  <tr>
    <td>Soccer</td>
    <td rowspan="2">Free Time</td>
    <td>Math class</td>
  </tr>
  <tr>
    <td>Biology</td>
    <td>Travel</td>
  </tr>
</table>  */
}

//TODO: Practice: Tables (Практика: Таблицы)
// Как и в случае со списком транспорта, теперь нам нужно добавить таблицу, показывающую цены на билеты.
// Задача: добавить следующую таблицу после списка транспорта:
// Подсказка: таблица должна начинаться с тега <table>.
// Каждая строка начинается с тега <tr>, а ячейки таблицы представлены с помощью тегов <td>.
// Для заголовка таблицы используйте теги <th> вместо <td>.
// Чтобы сделать таблицу видимой, добавьте атрибут border="1" в тег <table>.

//TODO: Page Sections (Разделы страницы)
// В дополнение к созданию отдельных элементов страницы HTML также предоставляет элементы блочного уровня, используемые для определения разделов вашей страницы, таких как верхний и нижний колонтитулы, меню навигации и т.д. Большинство страниц имеют схожую структуру:
// См. Рис: PageSections.jpg
// Это общая структура страницы. Структура вашей страницы может отличаться, однако это всегда будет набор похожих «box-like» («коробчатых») элементов.

//TODO: Header (Заголовок)
// Шапка веб-сайта обычно представляет собой раздел в верхней части страницы, который может включать логотип, название и другие подобные элементы.
// Он также обычно используется на разных страницах веб-сайта. Чтобы определить раздел заголовка, используйте тег <header>:
// Заголовок может включать в себя другие элементы HTML, такие как изображения, ссылки и т.д.
{
  /* <header>
  <h1>this is my header</h1>
 </header> */
}

//TODO: Navigation Bar (Панель навигации)
// Панель навигации содержит ссылки или кнопки, ведущие на другие страницы вашего веб-сайта.
// Он определяется с помощью тега <nav>:
// Меню навигации также может быть частью заголовка и включать в себя любые другие элементы HTML.
// Задача: Изменить код и добавить реальные ссылки в меню навигации.
{
  /* <nav>
  <a href="#">link 1</a>
  <a href="#">link 2</a>
  <a href="#">link 3</a>
 </nav> */
}

//TODO: Main Content (Основное содержание)
// Основное содержимое страницы определяется с помощью тега <main>, который может включать в себя различные подразделы, представленные тегами <article> и <section>.
{
  /* <main>
  <article>
    <h2>some heading</h2>
    <p>some text</p>
  </article>
 </main> */
}
// <article> заключает в себе блок контента, который имеет смысл сам по себе без остальной части страницы, например пост в блоге.
// На странице должен быть один элемент <main>.

//TODO: Article and Section (Статья и раздел)
//<section> похож на <article>, но используется для группировки одной части страницы, которая представляет собой единый функциональный элемент, например карту или набор заголовков. Рекомендуется начинать каждый раздел с заголовка.
//Элемент статьи может иметь разные разделы, а раздел может включать разные статьи. Все зависит от структуры и содержания вашей страницы.

//TODO: Aside (В сторону)
// Элемент <aside> используется для определения контента, который не имеет прямого отношения к основному контенту, но может предоставлять дополнительную информацию, такую ​​как связанные ссылки или похожие статьи.
// Задача: Откройте код и добавьте к тексту форматирование текста (выделите число 42 и имена книг/авторов жирным шрифтом и т.д.).
{
  /* <aside>
  <h2>Did you know?</h2>

  <p>The number 42 is, in The Hitchhiker's Guide to the Galaxy by Douglas Adams, the "Answer to the Ultimate Question of Life, the Universe, and Everything," calculated by an enormous supercomputer named Deep Thought over a period of 7.5 million years.</p>
</aside> */
}

//TODO: Footer (Нижний колонтитул)
// Нижний колонтитул находится в конце страницы. Он может содержать ссылки, примечания об авторских правах и т.д. и создается с помощью тега <footer>:
// Как и верхний колонтитул, нижний колонтитул обычно используется на разных страницах веб-сайта.
{
  /* <footer>
  <p align="center">Copyright</p>
 </footer> */
}

//TODO: Page Sections (Разделы страницы)
// В ситуациях, когда вы просто хотите сгруппировать элементы без какого-либо конкретного значения, вы можете использовать тег <div>.
// <div> является элементом уровня блока и действует как контейнер для других элементов.
// В следующем модуле мы увидим, как использовать CSS для стилизации элементов в контейнере.
{
  /* <div>
  <h1>some title</h1>
  <p>some text</p>
  <a href="#">some link</a>
</div> */
}

//TODO: Page Sections (Разделы страницы)
// Все эти элементы используются для структурирования страницы.
// Они не добавляют никакого стиля или форматирования, а представляют собой невидимые «boxes», в которых находится контент и другие элементы сайта. Важно создать правильную структуру страницы, поскольку поисковые системы и программы чтения с экрана используют ее для чтения содержимого страницы и понимания ее структуры.
// Мы также увидим, как использовать CSS для оформления страницы в следующем модуле.

//TODO: Practice: Page Sections (Практика: Разделы страницы)
// Теперь пришло время обернуть наш контент в соответствующие элементы, чтобы позже мы могли их стилизовать.
// Задачи:
// 1. Обернуть весь контент, который сейчас находится под тегом <body>, в тег <section>.
// 2. Добавьте элемент <footer> после <section> с текстом «Copyright».
// Мы стилизуем разделы позже, в модуле CSS.

//TODO: Forms (Формы)
// Формы позволяют пользователям вводить данные, которые обрабатываются сайтом.
// Форма содержит элементы управления, в том числе текстовые поля, кнопки, флажки и т.д. Элементы формы содержатся внутри тега <form>:
{
  /* <form>
</form>  */
}
// Элемент <form> действует как контейнер для своих элементов.

//TODO: Textbox (Текстовое окно)
// Элемент ввода позволяет создавать различные элементы формы.
// Атрибут type определяет тип элемента. Например, давайте сделаем текстовое поле:
// Позже в курсе мы узнаем, как получить значение текстового поля с помощью JavaScript.
{
  /* <form>
  <input type="text" >
</form>   */
}

//TODO: Input (Ввод)
// Элемент ввода поддерживает различные типы. Например:
// Типы определяют содержимое со значением, которое ожидает ввод. Делает открытой клавиатуру с соответствующей раскладкой, например, а для телефонного ввода автоматически открывает цифры.
// Запустите код и посмотрите, как меняется раскладка клавиатуры для разных типов ввода.
{
  /* <form>
  <input type="text" >
  <input type="email" >
  <input type="tel" >
</form>   */
}

//TODO: Labels (Ярлыки)
// Элементы формы могут иметь метки.
// Чтобы присвоить элементу метку, сначала нужно добавить к нему атрибут id:
{
  /* <input type="text" id="name"></input> */
}
// Значение атрибута id должно быть уникальным на странице.

//TODO: Labels (Ярлыки)
// Теперь мы можем создать элемент <label> и связать его с созданным нами идентификатором:
{
  /* <label for="name">Name</label>
<input type="text" id="name"></input> */
}
// Обратите внимание, что атрибут for используется для связывания метки с идентификатором элемента формы.

//TODO: Labels (Ярлыки)
// Ярлыки — это не просто описания полей, они также кликабельны: когда вы щелкаете по ярлыку, связанный с ним элемент формы автоматически фокусируется. Давайте добавим несколько меток в нашу форму:
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name"> <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email">
</form>    */
}
// Задача: Откройте код и добавьте еще одно текстовое поле для номера телефона с его меткой.

//TODO: Placeholder (Заполнитель)
// Текстовые поля также могут иметь замещающий текст, описывающий значение, ожидаемое полем. Давайте добавим заполнители к нашим полям:
// Запустите код и посмотрите на заполнители в действии!
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
</form>  */
}

//TODO: Practice: Forms (Практика: Формы)
// Теперь мы можем создать раздел, чтобы пользователи могли покупать билеты. Задачи:
// 1. Добавить новый раздел <section> ниже первого, но выше нижнего колонтитула.
// 2. Создайте в этом разделе форму, которая включает два текстовых поля и соответствующие им метки. (один билет для взрослых, другой для детей).
// 3. Используйте числовой тип для входных данных.
// 4. Используйте тег <br>, чтобы разделить текстовые поля на отдельные строки. Подсказка: Вот пример формы с полем ввода и его меткой:
{
  /* <label for="name">Name</label>
<input type="number" id="name">  */
}

//TODO: Checkboxes (Флажки)
// Элемент ввода можно использовать для создания флажков.
// Например:
// Мы разместили метки после вводов, чтобы они отображались рядом с флажками справа.
{
  /* <form>
   <h2>Choose your interests:</h2>
  <input type="checkbox" id="tech">
  <label for="tech">Tech</label><br>
  
  <input type="checkbox" id="sports">
  <label for="sports">Sports</label><br>

  <input type="checkbox" id="books">
  <label for="books">Books</label>  
</form>  */
}

//TODO: Radio Buttons (Радио-кнопки)
// Мы также можем сделать радиокнопки, чтобы можно было отметить только одну из них. Чтобы сгруппировать переключатели, мы должны дать им одно и то же имя, используя атрибут name:
// Все радиокнопки имеют одинаковое имя.
// Теперь можно выбрать только один из вариантов.
{
  /* <form>
  <h2>Title:</h2>
  <input type="radio" name="title" id="mr">
  <label for="mr">Mr</label><br>
  
  <input type="radio" name="title" id="ms">
  <label for="ms">Ms</label><br>

  <input type="radio" name="title" id="mrs">
  <label for="mrs">Mrs</label>
</form> */
}

//TODO: Textarea (Текстовое поле)
// Элемент ввода используется для ввода одной строки текста.
// Чтобы сделать многострочное поле ввода, используйте элемент <textarea>:
// Задача: Добавить метку к текстовому полю.
// Обратите внимание, что текстовая область должна иметь закрывающий тег.
{
  /* <textarea id="message">
</textarea> */
}

//TODO: Drop-down (Раскрывающийся список)
// Раскрывающийся список позволяет пользователям выбрать один из нескольких вариантов.
// Его можно создать с помощью элемента <select>:
// Каждый параметр в раскрывающемся списке является элементом <option>.
// Задача: изменить код и добавить еще несколько параметров в раскрывающийся список.
{
  /* <form>
  <select>
    <option>Red</option>
    <option>Blue</option>
    <option>Orange</option>
  </select>
</form> */
}

//TODO: Buttons (Кнопки)
// Кнопки можно создавать с помощью элемента <button>:
// Нажатие на кнопку сейчас ничего не даст.
// Нам нужен JavaScript для добавления функциональности на страницу.
// Мы узнаем, как это сделать позже в курсе.
{
  /* <form>
  <button>Send</button>
</form> */
}

//TODO: Buttons (Кнопки)
// Кнопки также можно создавать с помощью элемента ввода:
// Тип сброса сбрасывает поля формы при нажатии.
// Обратите внимание, что текст кнопки предоставляется с использованием атрибута value.
{
  /* <form>
  <input type="text">
  <input type="button" value="Send">
  <input type="reset" value="Reset"> 
</form> */
}

//TODO: Contact Form (Форма обратной связи)
// Давайте создадим настоящую контактную форму, используя элементы, которые мы изучили:
// Задача: изменить код, добавить поле электронной почты, кнопку сброса и заполнители для всех полей.
{
  /* <form>
  <h2>Contact Us</h2>
  <label for="type">Type: </label>
  <select id="type">
    <option>General</option>
    <option>Payment Issue</option>
    <option>Other</option>
  </select><br><br>
  <label for="name">Name: </label>
  <input type="text" id="name"><br><br>
  <label for="message">Message: </label><br>
  <textarea></textarea><br>
  <input type="button" value="Send">
</form>   */
}

//TODO: More Form Controls  Practice: (Практика: Дополнительные элементы управления формой)
// Нам нужно добавить в нашу форму кнопку, которая будет рассчитывать стоимость билетов.
// Задача: Добавить кнопку с текстом "Buy" (Купить) в конце формы. Подсказка: Вот пример кнопки:
{
  /* <input type="button" value="Buy"></input> */
}
// Отделите кнопку от ввода над ней с помощью тегов <br>, чтобы получить следующий результат:

//TODO: Special Characters (Специальные символы)
// В HTML символы <, >,",' и & являются специальными символами и являются частью самого синтаксиса HTML. Но что, если мы хотим включить эти специальные символы в наш текст? Например, мы хотим включить <and> знаки в абзаце:
// Это нарушит нашу разметку, так как знаки <and> интерпретируются как тег HTML.
{
  /* <p> A paragraph is created using the <p> tag </p>  */
}

//TODO: Special Characters (Специальные символы)
// Чтобы включить в текст специальные символы, нам нужно использовать ссылки на символы.
// Это специальные коды, представляющие символы; они начинаются с амперсанда (&) и заканчиваются точкой с запятой (;). Знак < представлен с помощью & lt; в то время как > представлен & gt;
// Запустите код, чтобы увидеть результат!
{
  /* <p> A paragraph is created using the &lt;p&gt; tag </p>  */
}

//TODO: Special Characters (Специальные символы)
// Вот список символов с соответствующими кодами ссылок:
// См. Рис: SpecialCharacter.png
// Коды можно запомнить, потому что они используют описательный текст:
// - lt означает меньше,
// - gt - больше и т.д.

//TODO: Special Characters (Специальные символы)
// Другой часто используемый символ в HTML — неразрывный пробел .
// Это пространство, которое не будет переходить на новую строку и создается с помощью & NBSP; . Два слова, разделенные неразрывным пробелом, будут слипаться. Например:
{
  /* <b>Speed:</b> 42&nbsp;mph */
}
// Еще одно распространенное использование неразрывного пробела — запретить браузерам обрезать пробелы на HTML-страницах.
// Если вы напишете в тексте 5 пробелов, браузер удалит 4 из них, но если вы используете 10 неразрывных пробелов, все они сохранятся.

//TODO: Comments (Комментарии)
// Вы можете добавлять комментарии к своему HTML-коду.
// Браузер не отображает комментарии, но они помогают документировать HTML и добавлять описания, напоминания и другие примечания. Комментарий должен быть помещен внутри <!-- и --> :
// <!-- Your comment goes here -->

//TODO: Comments (Комментарии)
// Вы также можете закомментировать элементы.
// Это заставляет их исчезнуть со страницы, но остаться в коде.
// Второй абзац не будет отображаться в выводе.
// Это может быть полезно, если у вас есть незавершенный код или вы пока не хотите удалять код со страницы.
{
  /* <p>some text</p>
 <!-- <p>some other text</p> --> */
}

//TODO: Special Characters Practice: (Практика: Специальные символы)
// В HTML доступно множество специальных символов.
// Одним из них является знак авторского права. Он имеет код: &copy;
// Задача: Поместите символ авторского права перед текстом Copyright в нижнем колонтитуле. Вот ожидаемый результат:

//TODO: Audio (Аудио)
// Элемент audio позволяет добавить на страницу аудиоплеер.
// Аудиофайл указывается с помощью атрибута src:
{
  /* <audio src="audio.mp3">
   Audio not supported
</audio> */
}
// Текст между тегом audio отображается, когда звук не поддерживается, например, при использовании старых браузеров.

//TODO: Controls (Элементы управления)
// Атрибут управления отображает элементы управления плеером:
// Теперь при запуске кода в браузере будет отображаться аудиоплеер, воспроизводящий данный трек.
{
  /* <audio src="http://www.sololearn.com/uploads/audio.mp3" controls>
   Audio not supported
</audio> */
}

//TODO: Looping (Зацикливание)
// Атрибут цикла заставляет проигрыватель автоматически запускать воспроизведение трека, когда он достигает конца.
// Существует также атрибут автовоспроизведения, который заставляет звук воспроизводиться автоматически, однако большинство браузеров отключают эту функцию, поскольку она раздражает большинство пользователей.
{
  /* <audio src="http://www.sololearn.com/uploads/audio.mp3" controls loop>
  Audio not supported
</audio> */
}

//TODO: Multiple Sources (Несколько источников)
// Разные браузеры поддерживают разные форматы аудио. Для максимальной совместимости элемент audio позволяет добавлять разные форматы одной и той же звуковой дорожки с помощью элемента <source>:
// Теперь, если браузер не может воспроизвести первый источник, он попытается воспроизвести второй.
{
  /* <audio controls>
    <source src="http://www.sololearn.com/uploads/audio.mp3" type="audio/mpeg">
    <source src="http://www.sololearn.com/uploads/audio.ogg" type="audio/ogg">
</audio>   */
}

//TODO: Video (видео)
// Воспроизведение видео очень похоже на аудиоэлемент :
// Как видите, элемент video поддерживает тот же синтаксис и те же атрибуты ( controls, autoplay, loop), что и элемент audio.
{
  /* <video controls>
   <source src="http://www.sololearn.com/uploads/video.mp4" type="video/mp4">
   <source src="http://www.sololearn.com/uploads/video.ogg" type="video/ogg">
   Video is not supported by your browser
</video>  */
}

//TODO: Video (видео)
// Вы можете указать высоту и ширину видеоплеера:
// Независимо от заданного размера видео будет сохранять свое соотношение сторон.
{
  /* <video controls width="480px" height="300px">
  <source src="http://www.sololearn.com/uploads/video.mp4" type="video/mp4">
  <source src="http://www.sololearn.com/uploads/video.ogg" type="video/ogg">
  Video is not supported by your browser
</video>  */
}

//TODO: Embed YouTube Videos (Встроить видео с YouTube)
// Еще один способ встроить видео на страницу — использовать элемент <iframe> . Например, чтобы встроить видео с YouTube, найдите понравившееся видео, нажмите кнопку «Поделиться» под видео и выберите кнопку « Встроить ». Это даст вам код с элементом <iframe>, например:
// Это отобразит проигрыватель YouTube на вашей странице.
// Задача: изменить код, чтобы встроить ваше любимое видео YouTube.
{
  /* <iframe width="560" height="315" src="https://www.youtube.com/embed/o8kT5c_4PAc" frameborder="0" allowfullscreen></iframe>  */
}

//TODO: What is CSS (Что такое CSS)
// CSS позволяет вам определять стили для наших веб-страниц. Его можно использовать для оформления текста, изменения цветов, размера шрифта и т.д., а также для создания макета — например, для создания столбцов, боковых панелей, навигационных меню и т.д.
// CSS расшифровывается как каскадные таблицы стилей.

//TODO: What is CSS (Что такое CSS)
// CSS использует правила для стилизации элементов.
// Правило представляет собой группу объявлений стилей.
// Пример правила может определить, что все абзацы должны быть красными и большими. Объявления стилей имеют следующий синтаксис:
// property: value;
// Каждое объявление указывает свойство элемента(ов), на которые мы ориентируемся, а затем значение, которое мы хотели бы присвоить этому свойству.

//TODO: CSS (CSS)
// Есть несколько способов применить правила CSS к нашим элементам. Первый способ — определить объявления стиля прямо в элементе, на который мы нацеливаемся, используя атрибут стиля. Например:
{
  /* <p style="color:red">some text</p>  */
}
// Запустите код, чтобы увидеть стиль, примененный к абзацу.

//TODO: CSS (CSS)
// У нас может быть несколько объявлений в правиле стиля:
// Объявления разделяются точкой с запятой.
// Задача: изменить код, чтобы применить к абзацу синий цвет и увеличить размер шрифта до 42 пикселей.
{
  /* <p style="color:red;font-size:26px">some text</p>  */
}

//TODO: CSS (CSS)
// Использование атрибута стиля в элементах HTML применяет стиль только к этому элементу. Но что, если мы хотим применить один и тот же стиль к нескольким абзацам? Нам пришлось бы скопировать один и тот же атрибут стиля и определить его для всех абзацев.
// Это сделало бы много избыточного кода и очень затруднило бы изменение стиля в будущем.

//TODO: CSS (CSS)
// Общепринятой практикой является определение правил CSS в отдельном документе и связывание его с HTML. CSS позволяет ориентироваться на элементы с помощью селекторов, что позволяет вам ориентироваться на определенные элементы и применять к ним один и тот же стиль.
// Мы узнаем о селекторах и увидим файл CSS в действии на следующем уроке.

//TODO: Rules & Selectors (Правила и селекторы)
// Правила стиля определяются в файле CSS с помощью селекторов.
// Давайте посмотрим на пример:
// p {
//   color: red;
// }
// Селектор p нацелен на все элементы абзаца нашего HTML.

//TODO: Selectors (Селекторы)
// Затем объявления заключаются в фигурные скобки { }:
// Теперь все абзацы нашей HTML-страницы будут окрашены в красный цвет.
{
  /* <p>some text</p>
<p>some other text</p>
<p>and another text</p> */
}
// p {
//   color: red;
// }

//TODO: Selectors (Селекторы)
// Правило может иметь несколько стилей, например:
// Задача: Откройте код и измените стиль, чтобы все абзацы стали зелеными.
{
  /* <p>some text</p>
<p>some other text</p>
<p>and another text</p> */
}
// p {
//   color: red;
//  font-size: 42px;
// }

//TODO: Multiple Selectors (Несколько селекторов)
// Мы можем нацеливаться на несколько селекторов одновременно, разделяя селекторы запятой. Например, сделаем все заголовки и абзацы h1 красными:
// Задача: добавить еще один абзац в HTML-код и увидеть стиль CSS в действии.
{
  /* <h1>Learning CSS</h1>
<p>This is awesome</p>
<p>some text goes here</p> */
}
// h1, p {
//   color: red;
// }

//TODO: Class Selector (Выбор класса)
// До сих пор мы видели селекторы элементов, которые используют имена элементов и нацелены на все из них в HTML.
// Часто нам нужно ориентироваться только на подмножество элементов, не изменяя остальные. Это можно сделать с помощью селектора классов. Сначала нам нужно добавить атрибут класса к элементам, на которые мы хотим ориентироваться:
{
  /* <p class="intro">CSS is awesome</p>
<p>some other text goes here</p> */
}

//TODO: Class Selector (Выбор класса)
// Теперь мы можем создать селектор класса в CSS:
// Обратите внимание, что селектор класса должен начинаться с точки, за которой следует имя класса, которое мы дали нашему элементу. Вы можете применить правило стиля .intro к любому элементу на своей странице, просто добавив атрибут класса.
// Задача: изменить код и добавить правило .intro в последний абзац страницы.
{
  /* <p class="intro">CSS is awesome</p>
<p>some other text goes here</p>
<p>another great text</p> */
}
// .intro {
//   color: red;
//   background-color: yellow;
// }

//TODO: Selectors (Селекторы)
// Мы также можем создавать селекторы на основе атрибута id элементов.
// Это делается с помощью символа решетки (#) перед значением id:
// Это нацелит элемент с id="intro" в нашем HTML.
// На странице может быть только один элемент с одинаковым идентификатором, а значение класса может использоваться несколько раз.
{
  /* <p id="intro">CSS is awesome</p>
<p>some other text goes here</p>
<p>another great text</p> */
}
// #intro {
//   color: red;
//   background-color: yellow;
// }

//TODO: Selectors (Селекторы)
// Мы также можем ориентироваться на элементы в зависимости от их местоположения. Например, есть два элемента <strong>, один внутри абзаца, а другой внутри элемента списка. Мы можем настроить таргетинг только на тот, который находится внутри элемента списка, используя следующее правило:
// Пробел означает, что элемент <strong> должен находиться внутри элемента <li>.
{
  /* <p>This is <strong>awesome</strong></p>
<ul>
  <li>some item</li>
  <li><strong>another</strong> item</li>
</ul> */
}
// li strong {
//   color: purple;
// }

//TODO: Style Inheritance (Наследование стиля)
// Стили CSS, заданные для родительских элементов, наследуются дочерними элементами. Например, если вы установите цвет и шрифт для элемента, каждый элемент внутри него также будет оформлен с использованием этого цвета и шрифта, если только вы не применили к ним другие значения цвета и шрифта:
// Не все стили наследуются, например, ширина и другие подобные свойства макета.
{
  /* <header>
  <h1>some title</h1>
  <p>some text</p>
  <p>another text</p>
</header>  */
}
// header {
//   color: red;
//   font-size: 24px;
// }

//TODO: Practice: CSS Selectors (Практика: CSS Селекторы)
// Время для некоторых стилей! Начнем с цветов текста:
// Задачи:
// 1. Сделать так, чтобы элементы <strong> использовали для текста цвет #2493df.
// 2. Измените цвет текста нижнего колонтитула на #595959.
// Совет: используйте имена элементов для создания селекторов CSS.
// Например, вот как мы можем выбрать элемент нижнего колонтитула и указать цвет для его текста:
// footer {
//   color: red;
// }

//TODO: Styling Text (Стилизация текста)
// Давайте рассмотрим некоторые свойства, используемые для стилизации текста. Мы уже видели свойство color в действии, которое используется для изменения цвета текста.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   color: red;
// }

//TODO: Color Values (Цветовые значения)
// Помимо имен цвета, значение цвета также может быть установлено с использованием значений hex и rgb. Цвета отображаются комбинацией красного, зеленого и синего света (RGB). Шестнадцатеричные значения записываются с использованием символа хэштега (#), за которым следуют шесть шестнадцатеричных символов, определяющих компоненты:
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   color: #47759b;
// }

//TODO: Color Values (Цветовые значения)
// RGB определяет отдельные значения красного, зеленого и синего:
// Каждый компонент может принимать значение от 0 до 255.
// 0 — это отсутствие компонента, поэтому rgb(0, 0, 0) соответствует черному цвету, а rgb(255, 255, 255) — белому цвету.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   color: rgb(71, 117, 155);
// }

//TODO: Font Size (Размер шрифта)
// Свойство font-size используется для установки размера текста.
// Он может принимать значения в пикселях (px):
// Единица размера em — это еще один способ установить размер текста.
// 1em равен размеру шрифта, установленному для родительского элемента текущего элемента, который мы стилизуем.
// По умолчанию 1em = 16px.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   font-size: 32px;
//  }

//TODO: Font Family (Семейство шрифтов)
// Вы можете изменить шрифт текста, используя свойство font-family.
// Для работы данный шрифт должен быть доступен на компьютере пользователя.
// Существует только определенное количество шрифтов, которые обычно доступны во всех системах. Они называются веб-безопасными шрифтами и включают в себя: Arial, Courier New, Georgia, Times New Roman, Trebuchet MS, Verdana.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   font-family: Arial;
//  }

//TODO: Fonts (Шрифты)
// Обычной практикой является определение нескольких шрифтов в свойстве font-family, так что, если первый из них недоступен для пользователя, браузер попытается использовать следующий:
// Если браузер не поддерживает шрифт Arial, он пробует следующий шрифт (Helvetica Neue, затем Helvetica). Если в браузере их нет, он попробует обычный шрифт без засечек.
// Если название шрифта состоит из нескольких слов, оно должно быть в кавычках.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
// }

//TODO: font-style (стиль шрифта)
// Свойство font-style используется для выделения текста курсивом:
// Задача: Откройте код и добавьте несколько свойств в класс .intro , сделав его Arial, размером 32 пикселя и красным цветом.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   font-style: italic;
// }

//TODO: font-weight (вес шрифта)
// Свойство font-weight используется для выделения текста полужирным шрифтом.
// Вы также можете определить толщину шрифта числом от 100 (тонкий) до 900 (толстый). 400 соответствует обычному, а 700 соответствует жирному шрифту.
// Задача : изменить код, чтобы использовать числовой формат для свойства font-weight, чтобы сделать текст полужирным.
{
  /* <p class="intro">some text</p>
<p>some other text</p> */
}
// .intro {
//   font-weight: bold;
//  }

//TODO: Practice: Styling Text (Практика: Стилизация текста)
// Нам необходимо применить следующие стили текста:
// Задачи:
// 1. Для нижнего колонтитула используйте размер шрифта 14px.
// 2. Для заголовка используйте 20 пикселей.
// 3. Для элементов метки используйте 16 пикселей и сделайте их полужирными.
// Подсказка: установка размера шрифта осуществляется с помощью свойства font-size, а чтобы сделать текст полужирным, используйте font-weight: bold;

//TODO: text-transform (преобразование текста)
// Свойство text-transform позволяет преобразовывать текст со следующими значениями:
// uppercase (верхний регистр): Преобразует текст в прописные.
// lowercase (нижний регистр): преобразует текст в нижний регистр.
// capitalize (капитализация): Преобразует все слова, чтобы первая буква была заглавной.
{
  /* <p class="intro">some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// .intro {
//   text-transform: uppercase;
// }
// .outro {
//   text-transform: capitalize;
// }

//TODO: text-decoration (декорация текста)
// Свойство text-decoration поддерживает следующие значения:
// none: удаляет любое украшение.
// underline: подчеркивает текст.
// overline: придает тексту надчеркивание.
// line-through: перечеркивает текст.
// Например:
// Задача: добавить класс в средний абзац и сделать его текстовым оформлением поверх линии.
{
  /* <p class="intro">some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// .intro {
//   text-decoration: underline;
// }
// .outro {
//   text-decoration: line-through;
// }

//TODO: text-shadow (тень текста)
// Свойство text-shadow позволяет установить тень для текста.
// Он принимает 4 значения, например:
// - horizontal offset (горизонтальное смещение) тени.
// - vertical offset (вертикальное смещение).
// - blur radius (радиус размытия): чем выше значение, тем шире рассеивается тень.
// - color (цвет тени).
// Задача: изменить код, чтобы изменить цвет тени на зеленый.
{
  /* <h1>some title</h1>
<p class="intro">some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// h1 {
//   text-shadow: 3px 2px 3px red;
// }

//TODO: text-shadow (тень текста)
// Вы можете добавить несколько теней, разделив их запятой. Например:
{
  /* <h1>some title</h1>
<p class="intro">some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// h1 {
//   text-shadow: 3px 2px 3px red,
//   2px 2px 1px blue;
// }

//TODO: Text Alignment (Выравнивание текста)
// Свойство text-align используется для управления выравниванием текста внутри его контейнера.
// Поддерживаемые значения:
// - left (слева)
// - right (справа)
// - center (по центру)
// - justify (по ширине)
// Например:
{
  /* <h1>some title</h1>
<p class="intro">some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// h1 {
//   text-align: center;
// }
// Задача: изменить код, чтобы выровнять последний абзац по правому краю.

//TODO: Line Height (Высота линии)
// Свойство line-height устанавливает высоту каждой строки текста. Например, давайте установим высоту строки в 1.8 раза больше высоты шрифта:
// Рекомендуемая высота строки – 1.5–2 (двойной интервал).
{
  /* <h1>some title</h1>
<p class="intro">some text some text some text some text some text some text some text some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// .intro {
//   line-height: 1.8;
// }

//TODO: Letter & Word Spacing (Расстояние между буквами и словами)
// Свойства letter-spacing и word-spacing позволяют установить расстояние между буквами и словами в тексте. Например:
// Задача: Добавить правило, чтобы межбуквенный интервал в тексте заголовка был равен 2px.
{
  /* <h1>some title</h1>
<p class="intro">some text some text some text some text some text some text some text some text</p>
<p>some other text</p>
<p class="outro">some text</p> */
}
// .intro {
//   letter-spacing: 3px;
//   word-spacing: 3px;
// }

//TODO: Practice: Font Styles (Практика: Стили шрифтов)
// Теперь нам нужно применить некоторые стили шрифта.
// Задачи:
// 1. Добавить межбуквенный интервал в 2 пикселя в заголовке.
// 2. Выровняйте текст нижнего колонтитула по центру страницы.
// Подсказка: расстояние между буквами регулируется с помощью свойства letter-spacing, а выравнивание текста можно задать с помощью text-align.

//TODO: The Box Model (Коробочная модель)
// HTML-элементы отображаются в виде полей.
// Блочная модель определяет, как различные части бокса — margin, border, padding и content — работают вместе для создания бокса.
// Вот части блока:
// Content box (Блок содержимого) — это область, в которой отображается content (содержимое).
// padding box (Блок заполнения) — это пустое пространство вокруг содержимого.
// border box (Блок рамки) идет после padding box (блока заполнения).
// margin box (Блок поля) является последним и определяет пространство между этим полем и другими элементами.
// См. Рис: BoxModel.png
// Мы увидим, как определять эти блоки и управлять их размером.

//TODO: The Standard Box Model (Стандартная блочная модель)
// В стандартной блочной модели атрибуты высоты и ширины определяют размер content box (блока содержимого).
// Затем к этой ширине и высоте добавляются любые padding (отступы) и border (границы), чтобы получить общий размер блока. Например, общая ширина блока с padding (отступами) будет суммой ширины плюс  padding left (отступы слева) и padding right (отступы справа).
// См. Рис: StandardBoxModel.png
// Margin (Поле) не учитывается в отношении фактического (size of the box) размера блока, это пространство за пределами box (блока).

//TODO: Margin (Поле)
// Margin — это пространство вокруг вашего блока.
// Мы можем управлять всеми отступами элемента одновременно, используя свойство margin в следующем порядке:
// - top (сверху)
// - right (справа)
// - bottom (снизу)
// - left (слева )
// Например, давайте добавим абзац внутри контейнера class="box" :
{
  /* <div class="box">
  <p>some text</p>
</div> */
}

//TODO: Margin (Поле)
// Теперь давайте зададим абзацу несколько полей и посмотрим, как он себя ведет:
// Поля могут иметь положительные или отрицательные значения.
// Мы определили границы для наших блоков, чтобы видеть их и их поля. Мы узнаем больше о границах в следующем уроке.
{
  /* <div class="box">
  <p>some text</p>
</div> */
}
// p {
//   margin: 20px 50px 20px 50px;
//   padding: 5px 5px 5px 5px;
//   border: 5px solid black;
//   text-align: center;
//   font-size: 100px;
//   background-color: yellow;
// }
// .box {
//   border: 5px solid red;
//   background-color: aqua;
// }

//TODO: Margin (Поле)
// Поля могут быть предоставлены с использованием отдельных свойств.
// Следующий стиль:
// margin: 5px 10px 5px 10px;
// эквивалентно:
{
  /* <div class="box">
  <p>some text</p>
</div> */
}
// p {
//   margin-top: 5px;
//   margin-right: 10px;
//   margin-bottom: 5px;
//   margin-left: 10px;
//   border: 3px solid black;
// }
// .box {
//   border: 3px solid red;
// }
// Задача: изменить код, чтобы также дать поля внешнему блоку.

//TODO: Padding (Отступ)
// Отступ — это область между границей и содержимым.
// Он определяется аналогично margin:
// Запустите код, чтобы увидеть результат!
// Задача: Измените отступы на 10 пикселей со всех сторон.
{
  /* <div class="box">
    <p>some text</p>
</div> */
}
// p {
//   margin: 5px 10px 5px 10px;
//   padding: 4px 7px 4px 7px;
//   border: 3px solid black;
// }
// .box {
//   border: 3px solid red;
// }

//TODO: Box Size (Размер коробки)
// Подобно использованию атрибутов HTML, ширина и высота могут быть заданы с помощью CSS со свойствами ширины и высоты. Они могут принимать значения как в пикселях, так и в процентах. Например, давайте зададим контейнеру 50% ширины страницы:
// Помните, что окончательная ширина и высота блока вычисляются путем сложения ширины отступов и границ.
{
  /* <div class="box">
  <p>some text</p>
</div> */
}
// .box {
//   width: 50%;
//   border: 3px solid red;
// }

//TODO: Alternative Box Model (Альтернативная блочная модель)
// Может быть неудобно вычислять фактический размер блока из-за того, что к нему добавляются ширина отступов и границ.
// По этой причине CSS предоставляет альтернативную модель блока, в которой заданная ширина берется блоком и включает отступы и границу. Модель включается с помощью box-sizing: border-box:
// Теперь поле абзаца имеет ширину 200 пикселей, независимо от ширины отступов и границ.
// Без свойства box-sizing у него была бы ширина: 200+7+3+7+3 = 220px.
{
  /* <div class="box">
    <p>some text</p>
</div> */
}
// p {
//   margin: 5px 10px 5px 10px;
//   padding: 4px 7px 4px 7px;
//   width: 200px;
//   box-sizing: border-box;
//   border: 3px solid black;
// }
// .box {
//     border: 3px solid red;
// }

//TODO: Box Models (Коробчатые модели)
// Давайте сравним две блочные модели и создадим два абзаца, один из которых использует стандартную блочную модель, а другой — бордюрную рамку. Мы будем использовать одинаковые стили для обоих полей:
// Запустите код, чтобы увидеть, как свойство box-sizing влияет на размеры блоков.
{
  /* <div class="box1">Box 1</div>
<div class="box2">Box 2</div> */
}
// .box1 {
//   border: 3px solid red;
//   padding: 10px 10px 10px 10px;
//   margin: 5px 5px 5px 5px;
//   width: 200px;
//   height: 100px;
// }
// .box2 {
//   border: 3px solid red;
//   padding: 10px 10px 10px 10px;
//   margin: 5px 5px 5px 5px;
//   width: 200px;
//   height: 100px;
//   box-sizing: border-box;
// }

//TODO: Practice: The Box Model (Практика: Коробочная модель)
// Пришло время добавить поля и отступы к нашим контейнерам.
// Tasks:
// 1. Add 10px top and bottom margins to our heading.
// 2. Add 10px top margin to the footer.
// 3. Add 10px padding from all sides to our section elements.
// Задачи:
// 1. Добавьте к нашему заголовку отступы по 10 пикселей сверху и снизу.
// 2. Добавьте верхнее поле (margin) в 10 пикселей к нижнему колонтитулу.
// 3. Добавьте 10px отступ со всех сторон к нашим элементам раздела.
// Подсказки: свойства padding и margin могут принимать 4 значения, по одному для каждой стороны элемента в следующем порядке: вверх-вниз-вниз-вправо.
// Если вам нужно применить одно и то же значение ко всем направлениям, вы можете указать одно значение, например: padding: 10px;

//TODO: Border (Граница)
// Свойство границы позволяет вам установить стиль границы для элементов.
// Свойство принимает 3 values (значения):
// - the width in pixels (ширина в пикселях)
// - the border style (стиль границы)
// - the border color (цвет границы)
// Если не определено, граница не видна.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   border: 3px solid red;
//  }

//TODO: Border Styles (Стили границы)
// Стиль границы может принимать одно из следующих значений:
// - dotted (пунктирная)
// - dashed (штрих-пунктирная)
// - solid (сплошная)
// - double (двойная)
// - groove (канавка)
// - ridge (ребро)
// - inset (вставка)
// - outset (начало)
// Например:
// Подобно отступам и полям, граница поддерживает отдельные свойства для установки границы для каждой стороны, например: верхняя граница, нижняя граница и т.д.
// Задача: изменить код и установить стиль границы groove (на углубление).

//TODO: Border Radius (Радиус границы)
// Свойство border-radius позволяет скруглять углы элементов. Например:
// Одно предоставленное значение использует это значение для всех 4 углов.
// Вы также можете установить радиус границы для каждого угла отдельно,
// разделив их пробелами.
// Радиус применяется ко всему элементу, даже если для него не установлена ​​граница.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   border: 3px solid green;
//   border-radius: 10px;
// }

//TODO: Background (Фон)
// Свойство background-color устанавливает цвет фона для элемента.
// Вы можете установить цвет, используя имена цветов, шестнадцатеричные значения и rgb.
// Задача: Откройте код и измените цвет фона окна на синий.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   background-color: red;
//   height:100px;
//   padding: 10px;
// }

//TODO: Background Image (Фоновая картинка)
// Вы также можете установить изображение в качестве фона элемента, используя свойство background-image. Он имеет следующий синтаксис:
// Адрес изображения должен быть заключен в кавычки и заключен в атрибут url(). Небольшое изображение по умолчанию размещается мозаично, чтобы заполнить поле.
// Если изображение больше элемента, оно не уменьшается по умолчанию, и мы видим только ту часть, которая помещается в поле.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   background-image: url('https://sololearnassets.azureedge.net/sl-logo.png');
//   height:150px;
//   padding: 10px;
// }

//TODO: Background Image (Фоновая картинка)
// Свойство background-repeat может управлять тем, как изображение размещается (или повторяется) в поле. Может принимать следующие значения:
// - no-repeat: изображение не мозаично.
// - repeat-x: повторить по горизонтали.
// - repeat-y: повторить по вертикали.
// - repeat: повтор в обоих направлениях (значение по умолчанию).
// Давайте изменим наш фон, чтобы он повторялся только по горизонтали:
// Задача: изменить код, чтобы удалить мозаику фонового изображения.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   background-image: url('https://sololearnassets.azureedge.net/sl-logo.png');
//   background-repeat: repeat-x;
//   height:150px;
//   padding: 10px;
// }

//TODO: Background Image (Фоновая картинка)
// Свойство background-position задает позицию, в которой появляется фоновое изображение.
// Он использует систему координат, в которой верхний левый угол прямоугольника находится в позиции (0,0).
// В качестве значения может принимать как пиксельные/процентные единицы, так и ключевые слова (top, left, right, bottom, center).
// Давайте расположим наше фоновое изображение по центру поля по горизонтали и вертикали:
// Значение background-position по умолчанию (0,0): верхний левый угол.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   background-image: url('https://sololearnassets.azureedge.net/sl-logo.png');
//   background-repeat: no-repeat;
//   background-position: center center;
//   height:150px;
//   padding: 10px;
//   border: 1px solid black;
// }

//TODO: Background Image (Фоновая картинка)
// Свойство background-size позволяет вам определить, как изображение должно помещаться внутри поля.
// У него есть два возможных значения:
// - cover: изображение будет полностью закрывать поле, сохраняя соотношение сторон.
// - contain: изображение полностью помещается внутри коробки. Например:
// Задача: изменить код, чтобы использовать другое значение свойства background-size, и посмотреть, как это изменит результат.
{
  /* <div class="box">
  some text
</div> */
}
// .box {
//   background-image: url('https://sololearnassets.azureedge.net/sl-logo.png');
//   background-repeat: no-repeat;
//   background-size: contain;
//   height:150px;
//   padding: 10px;
//   border: 1px solid black;
// }

//TODO: Practice: Backgrounds (Практика: Фон)
// Давайте добавим цвета фона в наши контейнеры.
// Задачи:
// 1. Установить цвет фона элементов section - white.
// 2. Установите цвет фона всей страницы на #e0e0e0. Это можно сделать, нацелившись на элемент body.
// 3. Для нашего раздела с формой: присвойте ему атрибут id="buy", чтобы вы могли настроить его конкретно. Затем примените следующие стили:
// - установите цвет фона #687373
// - обеспечить 10px top margin
// - изменить цвет текста на #fcfcfc
// Подсказка: Помните, что таргетинг по идентификатору выполняется с использованием следующего синтаксиса:
// #buy {
//   background-color: red;
//  }

//TODO: Styling Lists (Списки стилей)
// По умолчанию элементы ненумерованного списка помечаются круглыми маркерами, а упорядоченные списки нумеруются. Свойство list-style-type позволяет изменить маркеры на circle (круговые), square (квадратные), decimal (десятичные), disc (дисковые), lower-alpha (нижний альфа), lower-roman (нижний римский) и т.д.
// Задача: изменить код, чтобы использовать римские цифры для списка, используя нижнее римское значение.
{
  /* <ul> 
  <li>Apples</li>
  <li>Milk</li>
  <li>Eggs</li>
</ul> */
}
// ul {
//   list-style-type: square;
// }

//TODO: Styling Lists (Списки стилей)
// Свойство list-style-position определяет положение маркеров:
// - inside (внутри)
// - outside (снаружи)
// Значение по умолчанию — outside (снаружи).
{
  /* <ul> 
  <li>Apples</li>
  <li>Milk</li>
  <li>Eggs</li>
</ul> */
}
// ul {
//   list-style-type: circle;
//   list-style-position: inside;
// }

//TODO: Styling Lists (Списки стилей)
// Свойство list-style-image можно использовать для указания изображения, которое будет использоваться в качестве маркера элемента списка.
// Однако это свойство не позволяет управлять положением и размером изображения.
// Если вы хотите использовать изображение в качестве маркера, лучше установить list-style-type to none и добавить background image к элементам списка с marker image (изображением маркера), positioning it to the left (расположив его слева).
{
  /* <ul> 
  <li>Apples</li>
  <li>Milk</li>
  <li>Eggs</li>
</ul> */
}
// ul {
//   list-style-image: url('https://www.sololearn.com/images/bullet.jpg');
// }

//TODO: Styling Lists (Списки стилей)
// Свойство list-style — это сокращение для установки list-style-type, list-style-image и list-style-position в одном объявлении:
// Это будет то же самое, что:
// ul {
//   list-style-type: square;
//   list-style-position: outside;
//   list-style-image: none;
//  }
{
  /* <ul> 
  <li>Apples</li>
  <li>Milk</li>
  <li>Eggs</li>
</ul> */
}
// ul {
//   list-style: square outside none;
//  }

//TODO: Styling Links (стилизация ссылок)
// Ссылка по умолчанию окрашена в синий цвет и подчеркнута.
// Мы можем стилизовать ссылки с помощью свойств CSS (например, color (цвет), font-family (семейство шрифтов), background (фон) и т.д.).
// Кроме того, ссылки могут быть оформлены по-разному, в зависимости от того, в каком состоянии они находятся. Доступны следующие селекторы:
// a:link — определяет стиль для обычных непосещенных ссылок.
// a:visited — определяет стиль посещенных ссылок.
// a:active — ссылка становится активной после нажатия на нее.
// a:hover - ссылка наводится при наведении на нее курсора мыши.
// Они называются pseudo selectors (псевдоселекторами).
{
  /* <a href="#">some link</a> */
}
// a {
//   color: green;
// }

//TODO: Styling Links (стилизация ссылок)
// Давайте добавим цвет фона для ссылок, когда они наведены:
// Задача: изменить код, чтобы при наведении на ссылки отображалась черная рамка.

//TODO: Styling Links (стилизация ссылок)
// По умолчанию все ссылки подчеркнуты.
// Мы можем удалить подчеркивание, используя свойство text-decoration:
// Задача: изменить код, чтобы добавить подчеркивание к ссылкам при наведении курсора.

//TODO: Styling Links (стилизация ссылок)
// Обычно ссылки оформляются в виде кнопок и используются для меню навигации. Во-первых, мы помещаем ссылки в неупорядоченный список:
// Мы устанавливаем свойство display для элементов списка на inline, чтобы они располагались на одной строке с другими, действуя как встроенные элементы.
{
  /* <ul>
  <li><a href="#">Home</a></li>
  <li><a href="#">About</a></li>
  <li><a href="#">Contacts</a></li>
</ul> */
}
// body {
//   margin: 0;
// }
// ul {
// padding: 0;
// margin-top:10px;
// width: 100%;
// }
// li {
// display: inline;
// }
// a {
// outline: none;
// text-decoration: none;
// display: inline-block;
// margin-left: 1%;
// text-align: center;
// padding: 10px;
// box-sizing: border-box;
// width:31%;
// color: white;
// background-color: green;
// }
// a:hover {
// background: blue;
// }

//TODO: Practice: Styling Lists (Практика: Стилизация списков)
// У нас есть один маркированный список на нашей странице для Transport section.
// Давайте добавим к нему немного стиля!
// Задания:
// 1. Поменять bullets to squares (круглые пули на квадратные).
// 2. Измените положение маркеров, чтобы они находились bullets to be inside the items (внутри элементов).
// 3. Добавьте 30px padding to the left of the list (отступ слева от списка).
// Подсказка: тип маркированного списка можно изменить с помощью свойства list-style-type, а их положение — с помощью list-style-position.

//TODO: Styling Tables (Таблицы стилей)
// HTML-таблица по умолчанию выглядит непривлекательно:
// Запустите код, чтобы увидеть таблицу без каких-либо стилей.
{
  /* <table>
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}

//TODO: Styling Tables (Таблицы стилей)
// Давайте добавим несколько основных стилей в нашу таблицу:
// Ячейки таблицы имеют интервал между ними по умолчанию, что приводит к появлению двойных границ. Свойство border-collapse задает свертывание границ в одну, благодаря чему таблица выглядит намного лучше.
{
  /* <table>
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}
// table {
//   border-collapse: collapse;
//   width: 100%;
// }
// td,
// th {
//   border: 1px solid black;
//   text-align: center;
// }

//TODO: Styling Tables (Таблицы стилей)
// Мы также можем предоставить некоторые padding (отступы) для ячеек, чтобы дать содержимому некоторое пространство для «breath» (дыхания):
// Мы также выровняли текст во всех ячейках по центру.
{
  /* <table>
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}
// table {
//   border-collapse: collapse;
//   width: 100%;
// }
// td, th {
//   border:1px solid black;
//   padding: 10px;
//   text-align: center;
// }

//TODO: Styling Tables (Таблицы стилей)
// Теперь мы можем назначить цвет фона для наших ячеек заголовков:
// Задача: изменить код, чтобы тексты заголовков отображались белыми на черном фоне.
{
  /* <table>
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}
// table {
//   border-collapse: collapse;
//   width: 100%;
// }
// td, th {
//   border:1px solid black;
//   padding: 10px;
//   text-align: center;
// }
// th {
//   background-color: #d3d3d3;
// }

//TODO: Styling Tables (Таблицы стилей)
// Мы можем сделать ряды еще интереснее!
// CSS предоставляет псевдоселектор nth-child(), который позволяет вам выбирать определенные строки и стилизовать их. Например, мы можем стилизовать 3-ю строку следующим образом:
// Строки считаются сверху вниз, включая строки заголовков.
{
  /* <table>
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
</table>  */
}
// table {
//   border-collapse: collapse;
//   width: 100%;
// }
// td, th {
//   border:1px solid black;
//   padding: 10px;
//   text-align: center;
// }
// th {
//   background-color: #d3d3d3;
// }
// tr:nth-child(3) {
//   background-color: #b0d1e4;
// }

//TODO: Styling Tables (Таблицы стилей)
// Селектор nth-child позволяет вам также определять правила для строк вместо указания числа. Например, мы можем стилизовать нечетные и четные строки отдельно, задав им разные цвета фона:
// Это автоматически применит назначенные стили к нечетным и четным строкам.
// Задача: добавить несколько новых строк в таблицу и посмотреть, как они автоматически принимают стиль.
{
  /* <table>
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Amy</td>
    <td>42</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>19</td>
  </tr>
  <tr>
    <td>James</td>
    <td>24</td>
  </tr>
</table>  */
}
// table {
//   border-collapse: collapse;
//   width: 100%;
// }
// td, th {
//   border:1px solid black;
//   padding: 10px;
//   text-align: center;
// }
// th {
//   background-color: #d3d3d3;
// }
// tr:nth-child(even) {
//   background-color: #b0d1e4;
// }
// tr:nth-child(odd) {
//   background-color: #6aabd1;
// }

//TODO: Practice: Styling Tables (Практика: Таблицы стилей)
// Пришло время изменить нашу таблицу цен!
// Задачи:
// 1. Установите для свойства border-collapse таблицы значение collapse (свернуть), чтобы унифицировать borders (границы).
// 2. Сделайте borders (границу) ячеек td и th черной, шириной 1px, solid (сплошной) по стилю.
// 3. Добавьте 10px внутреннего padding (отступа) ко всем ячейкам, включая ячейки header (заголовка) таблицы.
// 4. Добавьте следующий стиль в ячейки заголовка таблицы: используйте #2493df для background color (цвета фона) и белый цвет для текста.
// Совет. Чтобы настроить таргетинг как на ячейки таблицы, так и на ячейки заголовка, используйте следующий синтаксис:
// td, th {
//   border: 1px solid black;
//   padding: 10px;
//  }

//TODO: Styling Forms (Стилизация форм)
// Давайте возьмем образец формы и добавим к нему стиль.
// Текстовые поля имеют размер по умолчанию и черную рамку.
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
  <br><br>
  <input type="button" value="Send">
</form>   */
}

//TODO: Styling Forms (Стилизация форм)
// Мы можем добавить стиль к текстовым полям и меткам, выбрав их по имени:
// Стиль также будет применяться к кнопке, поскольку она также является элементом ввода.
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
  <br><br>
  <input type="button" value="Send">
</form>  */
}
// input {
//   border:1px solid green;
//   width:100%;
//   padding: 5px;
// }
// label {
//   font-weight: bold;
//   color:green;
// }

//TODO: Styling Forms (Стилизация форм)
// Мы можем ориентироваться на элементы ввода по их типу, используя следующий синтаксис:
// Это применит стиль только к элементам <input type="text"> .
// Задача: изменить код, чтобы стиль также применялся к входным данным  email type (электронной почты).
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
  <br><br>
  <input type="button" value="Send">
</form>  */
}
// input[type='text'] {
//   border:1px solid green;
//   width:100%;
//   padding: 5px;
// }
// label {
//   font-weight: bold;
//   color:green;
// }

//TODO: Styling Forms (Стилизация форм)
// Мы также можем стилизовать текст внутри текстовых полей, как и любой другой текст.
// Давайте сделаем его зеленым и жирным:
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
  <br><br>
  <input type="button" value="Send">
</form>  */
}
// input[type='text'], input[type='email'] {
//   border:1px solid green;
//   width:100%;
//   padding: 5px;
//   color: green;
//   font-weight: bold;
// }
// label {
//   font-weight: bold;
//   color:green;
// }

//TODO: Styling Forms (Стилизация форм)
// Точно так же мы можем применить стиль к нашей кнопке:
// Мы использовали border:none , чтобы удалить границу по умолчанию с кнопки.
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
  <br><br>
  <input type="button" value="Send">
</form>  */
}
// input[type='text'], input[type='email'] {
//   border:1px solid green;
//   width:100%;
//   padding: 5px;
// }
// label {
//   font-weight: bold;
//   color:green;
// }
// input[type='button'] {
//   background-color: green;
//   border: none;
//   border-radius: 20px;
//   padding: 10px 20px;
//   font-weight: bold;
//   color: white;
// }

//TODO: Styling Forms (Стилизация форм)
// Как и в случае со ссылками, мы можем использовать псевдоселектор :hover для стилизации кнопки при наведении курсора:
// Теперь кнопка станет серой, когда мы наведем на нее указатель мыши.
// Задача: изменить код и скруглить углы текстовых полей, добавив свойство border-radius, аналогичное кнопке.
{
  /* <form>
  <label for="name">Name: </label>
  <input type="text" id="name" placeholder="John Smith"> 
  <br><br>
  <label for="email">Email: </label>
  <input type="email" id="email" placeholder="name@domain.com">
  <br><br>
  <input type="button" value="Send">
</form>  */
}
// input[type='text'], input[type='email'] {
//   border:1px solid green;
//   width:100%;
//   padding: 5px;
//   border-radius: 20px;
// }
// label {
//   font-weight: bold;
//   color:green;
// }
// input[type='button'] {
//   background-color: green;
//   border: none;
//   border-radius: 20px;
//   padding: 10px 20px;
//   font-weight: bold;
//   color: white;
// }
// input[type='button']:hover {
// background-color: gray;
// }

//TODO: Practice: Styling Forms (Практика: Стилизация форм)
// Мы собираемся изменить многое в форме покупки.
// Давайте начнем с некоторых основных стилей.
// Задачи:
// 1. Дайте отступ 2px текстовым полям с цифрами, выровняйте их текст по центру.
// 2. Установите ширину числовых полей на 50 пикселей.
// 3. Установите цвет фона кнопки на #2493df. Сделайте текст на кнопке полужирным, размером 16 пикселей и белым цветом.
// 4. Удалите границу кнопки по умолчанию, используя border: none;
// Подсказка. Чтобы настроить таргетинг на определенные типы входных данных, используйте следующий синтаксис:
// input[type="number"] {
//   padding:2px;
//   text-align: center;
//   width:50px;
// }
// Мы изменим структуру формы на следующих уроках, так что не беспокойтесь, что форма выглядит неряшливо:
