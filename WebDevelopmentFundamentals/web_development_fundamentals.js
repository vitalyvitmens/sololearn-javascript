//TODO: Web Development Fundamentals (Основы веб-разработки)
// Курс «Основы веб-разработки» охватывает основы основных технологий, необходимые для создания веб-страниц, включая HTML, CSS и JavaScript. В качестве курсового проекта мы создадим с нуля функциональный веб-сайт по продаже билетов. Курс «Основы веб-разработки» не требует предварительного опыта программирования, так что давайте приступим прямо сейчас!)

//TODO: Web Development (Веб-разработка)
// Строительными блоками всех веб-страниц являются HTML, CSS и JavaScript . HTML — это язык разметки, который используется для того, чтобы сообщить браузеру, какова структура и содержимое веб-страницы. Посмотрите этот простой HTML- код, чтобы создать абзац текста:
{
  /* <p>Hello Vitaly</p> */
}
// Нажмите на код и измените текст в коде, чтобы показать свое имя, затем запустите код, чтобы увидеть результат.

//TODO: HTML (HTML)
// HTML состоит из различных элементов, которые определяют поведение содержимого страницы. Наш пример кода создает элемент абзаца:
// Некоторые другие примеры элементов включают изображения, заголовки, ссылки и т.д.
{
  /* <p>Hello there</p>  */
}

//TODO: HTML Elements (HTML-элементы)
// HTML-элемент создается с помощью тегов . Например, чтобы сделать абзац, мы должны заключить его в тег абзаца :
{
  /* <p>I am learning HTML</p>  */
}
// Тег <p> используется для определения абзаца текста.

//TODO: HTML Elements (HTML-элементы)
// Давайте снова посмотрим на код:
{
  /* <p>I am learning HTML</p>  */
}
// <p> — открывающий тег абзаца. Он определяет начало элемента.
// Элемент должен быть закрыт с помощью тега </p>, который используется для определения конца элемента. Обратите внимание на косую черту в теге — она используется для определения закрывающего тега.
// Текст между открывающим и закрывающим тегами является содержимым элемента.
// Эти компоненты составляют полноценный HTML-элемент.

//TODO: HTML Elements (HTML-элементы)
// Теперь, когда пользователь открывает страницу с помощью браузера, он будет обрабатывать заданные элементы и отображать содержимое для пользователя. Таким образом, элемент <p>I am learning HTML</p> будет отображаться для пользователя как простая строка текста без тегов: I am learning HTML
// Откройте текст выше и сделайте его допустимым элементом абзаца.

//TODO: HTML Elements (HTML-элементы)
// Важно использовать правильные имена тегов и скобки.
// Если вы сделаете опечатку в теге, браузер не сможет ее обработать и будет просто считать текстом. Например:
// Исправьте код, чтобы создать допустимый абзац текста.
// [par] some text [/par]
{
  /* <p>some text</p>   */
}

//TODO: Your First HTML (Ваш первый HTML)
// HTML-страница может содержать несколько элементов. Например, давайте создадим два абзаца:
// Помните, что каждому открывающему тегу <p> нужен закрывающий тег.
// Измените код и создайте карточку профиля с вашей информацией в следующем формате:
// Name: your name
// Age: your age
// Nationality: your nationality
{
  /* <p>I am learning HTML</p>
<p>HTML is fun</p>  */
}

//TODO: Practice: Welcome to Code Repo! (Практика: Добро пожаловать в репозиторий кода!)
// В этом проекте мы создадим сайт продажи билетов на Эйфелеву башню в Париже!
// Мы начнем с базовой веб-структуры, затем стилизуем страницу и создадим раздел расчета стоимости билетов. Давайте начнем с базового HTML!
// Задача: Код содержит текст краткого описания Эйфелевой башни. Оберните текст тегами абзаца. Добавьте новый абзац там, где вы видите разрыв строки (вы должны сделать 3 абзаца).
// Подсказка: абзац должен начинаться с тега <p> и заканчиваться закрывающим тегом </p>. Например:

//TODO: Headings (Заголовки)
// Тег <h1> используется для создания заголовка нашей страницы:
// Теперь текст My Website будет заголовком нашей страницы.
// Задача : изменить код и сделать текст «HTML is fun» заголовком.
{
  /* <h1>My Website</h1>  */
}

//TODO: Headings (Заголовки)
// Веб-страница может иметь несколько заголовков и подзаголовков.
// Для этого HTML предоставляет 6 различных тегов заголовков: от <h1> до <h6> . Например:
// <h1> — самый важный заголовок, а <h6> — наименее важный.

//TODO: Headings (Заголовки)
// Лучше всего иметь на странице один элемент <h1> , который определяет основной заголовок, а другой элемент заголовка использовать для других заголовков на странице.
// Задача : Откройте код и заполните его своей информацией.
// <h1> по умолчанию является самым большим заголовком, а <h6> — самым маленьким.

//TODO: Text Formatting (Форматирование текста)
// Для форматирования текста доступно несколько тегов. Тег <b> используется для выделения текста жирным шрифтом:
// Откройте код и измените текст, чтобы ваше имя было жирным.
{
  /* <b>A bold text</b> */
}

//TODO: Important Text (Важный текст)
// Тег <strong> используется для обозначения важности текста.
// С точки зрения стиля, он также делает текст жирным, однако его цель не просто сделать текст жирным, а продемонстрировать его важность по сравнению с соседним текстом.
{
  /* <strong>Warning!</strong>  */
}

//TODO: <strong> vs <b></b> (<strong> против <b>)
// Таким образом, мы можем сделать текст жирным, используя теги <b> и <strong>.
// Но какой из них мы должны использовать? Элемент <strong> предназначен для содержимого, которое имеет «большую важность», например предупреждения и оповещения. Элемент <b> предназначен для контента, который мы хотим выделить в предложении.
// Тег <strong> используется, чтобы сделать его семантически важным, в то время как <b> просто выделяет текст жирным шрифтом.

//TODO: Italic and Emphasis (Курсив и выделение)
// Тег <i> используется для выделения текста курсивом:
// Задача : изменить код, чтобы ваше имя было выделено курсивом. Вы также можете выделить текст курсивом, используя тег <em>, который используется для выделения акцента.
// Тег <em> предназначен для слов с ударением по сравнению с окружающим текстом.
{
  /* <i>some text</i>  */
}

//TODO: Underline (Подчеркнуть)
// Чтобы подчеркнуть текст, используйте тег <u> :
// Задача : Изменить код и изменить текст элемента.
// Помните, что всем этим тегам нужен закрывающий тег, чтобы определить конец элемента.
{
  /* <u>My Schedule</u>  */
}

//TODO: Practice: Text Formatting (Практика: Форматирование текста)
// Давайте добавим немного форматирования к нашему тексту!
// Задачи : 1. Создать заголовок над текстом с надписью « Эйфелева башня ».
// 2. Выделите важные слова и цифры в тексте жирным шрифтом: это « Эйфелева башня », « Париж », количество посетителей и количество ступеней.
// Подсказка : заголовок создается с помощью тега <h1>. Вы можете выделить слова жирным шрифтом, используя тег <strong> :
{
  /* <h1>Some title</h1> 
<p>some text with a <strong>bold</strong> word.</p> */
}

//TODO: Nesting (Вложение)
// Элементы могут быть размещены внутри других элементов. Это называется вложением. Например, у нас может быть жирное слово в абзаце:
// Как видите, элемент <b> вложен в элемент <p>.
// Измените код, чтобы отображался текст: «My name is», за которым следует ваше имя, выделенное жирным шрифтом.
{
  /* <p><b>HTML</b> is fun</p>  */
}

//TODO: Nesting (Вложение)
// Важно правильно вложить элементы. Вот пример неправильной вложенности:
// Теги должны открываться и закрываться таким образом, чтобы они находились внутри или снаружи друг друга.
// Задача: исправить приведенный выше код, чтобы создать правильную вложенность.
{
  /* <p><b>HTML is fun</p></b>  */
}

//TODO: Page Structure (Структура страницы)
// HTML-страница представляет собой комбинацию нескольких вложенных элементов. Базовая HTML-страница имеет следующую структуру:
{
  /* <html>
   <body>
   </body>
</html> */
}
// Тег <html> определяет страницу, а тег <body> определяет основной контент и содержит все элементы страницы, такие как абзацы, таблицы, списки и т.д.

//TODO: Page Structure (Структура страницы)
// Например, давайте включим абзац в <body> :
// Теперь у нас есть правильно отформатированная HTML-страница.
// Задача : изменить код, чтобы включить в текст ваше имя и возраст и выделить их жирным шрифтом.
{
  /* <html>
  <body>
    <p>some text</p>
  </body>
</html> */
}

//TODO: Page Structure (Структура страницы)
// Структуру HTML часто сравнивают с деревом.
// Тег <html> является корневым, а остальные элементы являются его дочерними элементами.
// В приведенном выше коде <body> является потомком <html>, а <p> — потомком <body>.
// Элемент, который включает в себя другие элементы, называется их родителем. Итак, <body> является родителем элемента <p>.

//TODO: Page Structure (Структура страницы)
// Давайте создадим страницу с заголовком и текстом:
// Задача: изменить код, чтобы включить некоторую информацию о вас, отформатированную с соответствующими тегами.
{
  /* <html>
  <body>
    <h1>My Page</h1>
    <p>Learning HTML</p>
  </body>
</html>
  */
}

//TODO: Page Structure (Структура страницы)
// Структура страницы позволяет браузеру понять и отобразить соответствующие элементы.
// Без этого содержимое будет отображаться как большой кусок без форматирования. Например:
// Запустите код, чтобы увидеть, как ведет себя необработанный текст, когда разметка не добавляется.
// Задача:
// Откройте текст и добавьте соответствующие теги форматирования, чтобы в результате получилась читаемая веб-статья.
// What is HTML HTML
// stands for HyperText Markup Language. It is a markup language and is used to define the structure and content of a web page.
// HTML elements are created using tags.

//TODO: Practice: Page Structure (Практика: Структура страницы)
// Чтобы сделать наш HTML корректной страницей, давайте добавим правильную структуру.
// Задача: Оберните содержимое тегами <html> и <body>, чтобы создать правильную разметку страницы.
// Подсказка: это пример правильной структуры:

//TODO: Attributes (Атрибуты)
// Теги могут иметь атрибуты, которые содержат дополнительную информацию об элементе. Например, атрибут align определяет выравнивание абзаца:
// Задача: Откройте код и измените атрибут align, чтобы выровнять текст по правому краю.
{
  /* <p align="center">some text</p> */
}

//TODO: Attributes (Атрибуты)
// Атрибуты имеют синтаксис name="value", ​​где name — это имя атрибута, а value — соответствующее значение. Атрибуты определены в открывающем теге:
// За именем атрибута должен следовать знак равенства.
{
  /* <p align="right">hello</p> */
}

//TODO: Attributes (Атрибуты)
// Значение атрибута должно быть заключено в одинарные или двойные кавычки. Убедитесь, что вы не смешиваете одинарные и двойные кавычки, например:
{
  /* <p align="center'>hey</p>  */
}
// Откройте код и исправьте атрибут.

//TODO: Links (Ссылки)
// Атрибуты используются для создания гиперссылок. Сделаем примерную ссылку:
// Тег <a> превращает заключенный в него текст в гиперссылку.
// Атрибут href указывает адрес ссылки.
// Откройте код и посмотрите на ссылку в действии.
{
  /* <a href="https://www.sololearn.com">Click here</a>  */
}

//TODO: Links (Ссылки)
// Элемент может иметь несколько атрибутов. Например:
{
  /* <a href="https://www.sololearn.com" target="_blank" title="Sololearn">Click here</a>  */
}
// Атрибут target указывает, как открыть ссылку. Со значением «_blank» он откроется в новой вкладке. Атрибут title определяет текст, который будет отображаться при наведении курсора на ссылку.
// Задача: изменить код, чтобы создать ссылку на ваш любимый веб-сайт.

//TODO: Images (Картинки)
// Некоторые элементы не имеют текстового содержимого и создаются с помощью одного открывающего тега. Например, чтобы вставить изображение на страницу:
// Атрибут src указывает адрес изображения, которое мы хотим встроить.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" >   */
}

//TODO: Images (Картинки)
// Атрибут alt используется для указания текста, который будет отображаться, если изображение не загрузится.
// Альтернативный текст действует как описание изображения.
// Используется в программах чтения с экрана, а также в поисковых системах, как описание изображения.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" >    */
}

//TODO: Images (Картинки)
// Вы также можете указать собственный размер изображения, используя атрибуты высоты и ширины :
// Если указано только одно измерение, другое будет регулироваться в соответствии с соотношением сторон изображения.
// Задача: Откройте код и измените изображение, чтобы оно имело высоту 300 пикселей.
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" width="200px" >     */
}

//TODO: Size Attributes (Атрибуты размера)
// Атрибуты высоты и ширины также могут принимать процентные значения . Например, давайте изменим наше изображение так, чтобы оно занимало половину ширины страницы:
// Задача: изменить код, чтобы изображение занимало 25% ширины страницы.
// значок репозитория кода
// Время добавить изображение
{
  /* <img src="http://www.sololearn.com/images/tree.jpg" alt="A Tree" width="50%" >  */
}

//TODO: Practice: HTML Attributes (Практика: HTML Атрибуты)
// Время добавить изображение на нашу страницу!
// Задачи: 1. Добавьте изображение сразу после заголовка со следующим источником: https://sololearnassets.azureedge.net/eiffel-tower.jpg
// 2. Измените размер изображения, чтобы оно занимало 30% ширины страницы. Подсказка: вот пример тега изображения:
{
  /* <img src="https://test.com/image.jpg" alt="Некоторое изображение" width="50%" ></img> */
}
