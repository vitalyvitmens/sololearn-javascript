//TODO: Coding for Marketers (Кодирование для маркетологов)
// Понимание основ HTML и CSS предоставит вам инструменты для понимания того, как создается веб-сайт, как он работает и как манипулировать лежащим в его основе кодом. Этот курс предназначен для цифровых маркетологов, которые хотят изучить основы веб-технологий и применять полученные знания в своей повседневной работе.

//TODO: Welcome (Добро пожаловать)
// Сегодня ожидается, что цифровые маркетологи будут очень креативными, аналитическими и технически подкованными. HTML и CSS являются основными языками, которые используются для создания веб-страниц и контента для Интернета. Понимание основ HTML и CSS предоставит вам инструменты для понимания того, как создается веб-сайт, как он работает и как манипулировать лежащим в его основе кодом. По сути, знание того, как кодировать, может сэкономить вам много времени, усилий и денег. Этот курс предназначен для цифровых маркетологов, которые хотят изучить основы веб-технологий и применять полученные знания в своей повседневной работе.
// Курс включает в себя реальные проекты и практические упражнения.

//TODO: Welcome (Добро пожаловать)
// HTML означает язык гипертекстовой разметки . _ _ Это стандартный язык разметки для веб-страниц, который позволяет форматировать содержимое, текст, изображения и другие элементы на веб-страницах.
// Знание HTML может помочь маркетологам и командам по контенту:
// - понимать содержимое веб-сайтов
// - выявлять и устранять проблемы с форматированием содержимого и веб-страниц - улучшать поисковую оптимизацию (SEO)
// - создавать и изменять шаблоны электронной почты
// - улучшать удобство использования, дизайн и структуру веб-сайта.
// В ходе этого курса мы рассмотрим практические примеры того, как добиться всех этих преимуществ.

//TODO: What is HTML (Что такое HTML)
// HTML использует теги для идентификации содержимого и создания элементов.
// Например, тег <h1> используется для заголовка, а тег <p> используется для создания абзаца текста:
{
  /* <h1>This is a heading</h1>
<p>This is some text.</p> */
}
// Как видите, текст заключен в теги абзаца. Тег слева называется начальным тегом, а последний — конечным тегом.
// Обратите внимание, что закрывающий тег использует косую черту.
// Приведенный выше код называется HTML-элементом. В нашем примере он включает в себя начальный тег, текст и конечный тег.

//TODO: HTML Tags (HTML-теги)
// HTML имеет множество тегов, которые используются для создания различных элементов.
// Например, тег <a> используется для создания ссылок. Давайте создадим абзац с текстом «Contact us» и сделаем из него ссылку на www.sololearn.com.
{
  /* <p>
   <a>Contact us</a>
</p> */
}
// С помощью приведенного выше кода мы создали абзац, содержащий ссылку. Как видите, теги могут быть вложены друг в друга: абзац может включать несколько ссылок, форматирование, изображения и т.д. Кстати, новые строки не влияют на HTML-код; вы можете поместить начальные теги в новые строки, чтобы сделать код более читаемым.
// Обратите внимание, что ссылка пока не работает, так как мы не указали, куда она должна нас вести.

//TODO: HTML Attributes (HTML-атрибуты)
// Теги HTML могут иметь атрибуты, определяющие свойства тега.
// Например, атрибут href указывает адрес ссылки:
{
  /* <p>
   <a href="https://www.sololearn.com">
    Contact us
  </a>
</p> */
}
// Атрибуты используются в начальном теге и обычно имеют структуру name="value". Теперь наша ссылка работает и ведет по указанному адресу.
// Теперь вы знаете самые важные концепции HTML: теги и атрибуты! На следующих уроках мы узнаем о других HTML-тегах и атрибутах, с которыми должен быть знаком каждый цифровой маркетолог.

//TODO: Practice: Welcome to your Marketing Email Project! (Практика: Добро пожаловать в ваш проект маркетинговой электронной почты!)
// Электронный маркетинг — один из самых эффективных инструментов для привлечения клиентов.
// В ходе этого проекта мы возьмем простой HTML/CSS-шаблон для вашей электронной почты, напишем в нем ваш контент, отформатируем его, оформим и оптимизируем его SEO, чтобы вы могли использовать его в своих маркетинговых кампаниях.
// Просмотрите задачу, напишите свой код и зафиксируйте его, чтобы сохранить прогресс. Во-первых, давайте определим заголовок для нашего электронного письма.
// Задача:
// 1. Внутри раздела <body> откройте тег <h1> и напишите внутри него свой заголовок. Пример
{
  /* <body>
    <h1>We're glad you're here</h1>
</body> */
}
// Мы также предоставили предопределенный код CSS — вы можете пока игнорировать его, а позже мы немного поколдуем с ним.

//TODO: What is CSS? (Что такое CSS?)
// HTML заботится о структуре веб-страницы.
// Но каждая страница нуждается в некотором стиле, чтобы она выглядела привлекательно, добавляла цвета и т.д.
// Это достигается с помощью CSS. Существует несколько способов добавления CSS на вашу HTML-страницу. Давайте посмотрим на самый простой, который использует атрибут стиля. Продолжая наш пример из предыдущего урока, изменим цвет ссылки на красный:
{
  /* <p>
   <a href="https://www.sololearn.com" style="color: red">
    Contact us
  </a>
</p> */
}
// Атрибут стиля определяет стиль CSS элемента. В нашем случае мы указали красный цвет. Стиль применяется только к элементу, на котором он используется.
// Не беспокойтесь о запоминании имен и значений атрибутов — они часто используют понятные имена.
// Если вы умеете читать HTML-код, вы поймете, какие атрибуты установлены, посмотрев на их имена и значения.

//TODO: Practice: Call to Action (Практика: Призыв к действию)
// Отличная работа!
// Наличие раздела с призывом к действию очень важно для маркетинговых электронных писем.
// Итак, давайте определим его, добавив ссылку, которая направит читателя на нужную нам страницу.
// Задача:
// 1. Под заголовком откройте элемент <a> и напишите свое сообщение, чтобы вставить в него призыв к действию.
// 2. Добавьте атрибут href внутрь тега <a> и поместите ссылку между кавычками. Пример
{
  /* <a href="www.sololearn.com" >Get started</a> <br>  */
}
// Добавьте тег <br> после закрывающего тега </a> для разрыва строки.

//TODO: Inspecting HTML (Проверка HTML)
// Теперь, когда вы знаете, как читать и понимать HTML-код веб-сайта, давайте научимся проверять HTML-код веб-сайта. В вашем браузере есть много полезных инструментов, которые можно использовать для этого. Просто щелкните правой кнопкой мыши любой элемент страницы и выберите Inspect (Проверить). Это откроет Инспектор и покажет вам HTML-код. Вот пример использования Google Chrome: Как видите, мы проверили HTML-код абзаца на веб-сайте SoloLearn. Это можно сделать на любом сайте. Вы даже можете внести изменения в HTML-код и увидеть результат.
// Помните, что изменения вносятся только в вашу локальную версию веб-сайта, а не в версию на сервере. Поэтому изменения временные и будут сброшены после обновления страницы, так как вы меняете HTML-код только на странице. который открыт в вашем браузере, а не тот, что на сервере.
// В приведенном выше примере используется Google Chrome, однако все современные браузеры поддерживают эту функцию.

//TODO: Practice: Main Message (Практика: Основное сообщение)
// Пришло время написать основной текст, чтобы ваша аудитория понимала, что вы предлагаете, и преимущества, которые это им даст.
// Задача
// 1. Ниже строки ссылки откройте элемент <p>.
// 2. Обобщите и напишите основное сообщение внутри тегов <p> и </p>.
// Пример
{
  /* <a href="www.sololearn.com" >Get started</a> <br>
<p>You have joined our growing group of learners who is looking to
    master a new programming language, become a developer,
    or just become more confident in their technical skills.</p>  */
}
// Элемент <p> автоматически добавляет разрыв строки .

//TODO: An Article (Статья)
// В этом модуле мы изучим самые важные теги HTML, форматируя текст для статьи в Интернете. Навыки, полученные здесь, можно использовать для форматирования любого типа веб-контента, включая сообщения в блогах, статьи, веб-страницы и т.д. Мы начнем с его необработанной текстовой версии, и наша цель — превратить его в форматированный HTML. Вот сырой текст:

// This is my heading

// This is some paragraph text.

// A bullet list:
// one
// two
// three

// A subheading

// Another paragraph of text and a numbered list:
// 1. Item 1
// 2. Item 2
// 3. Item 3

// Если вы запустите этот код в браузере, вся статья будет отображаться в одной строке, поскольку в ней еще нет HTML-разметки, а разрывы строк игнорируются. Мы также добавим в статью image (изображение), links (ссылки) и table (таблицу).
// Обратите внимание, что в статье используется короткий и простой текст, поэтому мы сосредоточимся на форматировании, а не на текстовом содержании.

//TODO: An Article (Статья)
// Сначала мы добавим теги к необработанному тексту и отформатируем соответствующие элементы шаг за шагом. Это поможет нам понять, как работает каждый тег и какой результат мы получаем визуально. Поскольку мы уже умеем делать абзацы, давайте добавим текст после заголовков в теги абзаца:
// This is my heading
// <p>
//   This is some paragraph text.

//   A bullet list:
//   one
//   two
//   three
// </p>

// A subheading
// <p>
//   Another paragraph of text and a numbered list:
//   1. Item 1
//   2. Item 2
//   3. Item 3
// </p>
// Запустите код, чтобы увидеть результат.
// Каждый абзац автоматически помещается на новую строку.

//TODO: Headings (Заголовки)
// Заголовки используются для разделения контента на удобоваримые разделы. HTML поддерживает 6 уровней заголовков, от <h1> до <h6>, причем h1 является самым важным. Давайте используем тег h1 для нашего основного заголовка и посмотрим на результат:
// <h1>This is my heading</h1>
// <p>
//   This is some paragraph text.

//   A bullet list:
//   one
//   two
//   three
// </p>

// A subheading
// <p>
//   Another paragraph of text and a numbered list:
//   1. Item 1
//   2. Item 2
//   3. Item 3
// </p>
// Заголовки играют важную роль в SEO, так как сообщают поисковым системам, какой контент на странице важен.
// Мы узнаем больше о SEO в следующем модуле.

//TODO: Headings (Заголовки)
// Для нашего подзаголовка мы можем использовать следующий уровень — тег h2.
// Заголовки имеют стиль по умолчанию (размер шрифта, цвет) в браузере, однако его можно изменить с помощью CSS.
{
  /* <h1>This is my heading</h1>
<p>
  This is some paragraph text.

  A bullet list:
  one
  two
  three
</p>

<h2>A subheading</h2>
<p>
  Another paragraph of text and a numbered list:
  1. Item 1
  2. Item 2
  3. Item 3
</p>     */
}

//TODO: Lists (Списки)
// Время создавать наши списки! HTML поддерживает два типа списков: упорядоченные и неупорядоченные. В неупорядоченном списке для каждого элемента используются маркеры. Чтобы создать список, нам сначала нужно создать тег <ul>, который означает неупорядоченный список. Затем внутри тега <ul> мы используем теги <li> для каждого элемента списка:
{
  /* <ul>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ul>  */
}
// Приведенный выше код создает неупорядоченный список из 3 элементов. Теперь мы можем использовать код в нашей статье:
{
  /* <h1>This is my heading</h1>
<p>
  This is some paragraph text.

  A bullet list:
  <ul>
    <li>one</li>
    <li>two</li>
    <li>three</li>
  </ul>
</p>

<h2>A subheading</h2>
<p>
  Another paragraph of text and a numbered list:
  1. Item 1
  2. Item 2
  3. Item 3
</p>     */
}
// Не забудьте закрыть тег <ul> в конце списка.

//TODO: Lists (Списки)
// Для нашего второго списка мы будем использовать упорядоченный список, в котором для каждого элемента используются числа.
// Он сделан аналогично ненумерованному списку, с той лишь разницей, что тег <ol> вместо <ul>:
// <ol>
//    <li>Item 1</li>
//    <li>Item 2</li>
//    <li>Item 3</li>
//  </ol>
// Обратите внимание, что вам не нужно ставить числа перед каждым элементом — HTML добавит их автоматически. Вот список в действии в нашей статье:
// <h1>This is my heading</h1>
// <p>
//   This is some paragraph text.

//   A bullet list:
//   <ul>
//     <li>one</li>
//     <li>two</li>
//     <li>three</li>
//   </ul>
// </p>

// <h2>A subheading</h2>
// <p>
//   Another paragraph of text and a numbered list:
//   <ol>
//     <li>Item 1</li>
//     <li>Item 2</li>
//     <li>Item 3</li>
//   </ol>
// </p>
// Мы использовали 3 элемента для наших списков, но вы можете использовать столько элементов в своих списках, сколько вам нужно.

//TODO: Practice: Bulleted list (Практика: Маркированный список)
// Иногда одного абзаца может быть недостаточно, чтобы донести ваше сообщение. В таких случаях может быть эффективным использование четкого маркированного списка, который предоставляет дополнительную информацию нашим клиентам. Этот список может иметь форму пути пользователя, сведений о продукте, списка продуктов и т.д.
// Задача:
// 1. Определите заголовок для вашего маркированного списка и заключите его в элемент <h2>.
// 2. Откройте тег <ul> сразу под только что написанным заголовком.
// 3. Откройте тег <li> для каждого элемента списка. Первая строка содержимого должна быть заголовком, за которым следует определение.
// Пример шаблона:
// <h2>Your subheading</h2>
// <ul>
//     <li>Your title for item 1<br>
//     Your definition for item 1.</li>
//     <li>Your title for item 2<br>
//     Your definition for item 2.</li>
//  </ul>
// Пример содержанияизображение содержимого
// Не забывайте о закрывающих тегах </ul> и </li>.

//TODO: Text Formatting (Форматирование текста)
// HTML поддерживает теги, используемые для форматирования текста.
// Вот самые популярные из них:
// <b> делает текст жирным.
// <strong> — это альтернативный полужирный тег.
// <i> делает текст курсивом.
// <em> — альтернативный курсивный тег.
// <u> делает текст подчеркнутым.
// <s> зачеркивает текст. Давайте воспользуемся этими тегами для форматирования текста в нашей статье и посмотрим на результат:
// <h1>This is my heading</h1>
// <p>
//   This is some paragraph text.

//   A <u>bullet list</u>:
//   <ul>
//     <li><b>one</b></li>
//     <li><s>two</s></li>
//     <li><i>three</i></li>
//   </ul>
// </p>

// <h2>A subheading</h2>
// <p>
//   Another paragraph of text and a <b>numbered list</b>:
//   <ol>
//     <li>Item 1</li>
//     <li>Item 2</li>
//     <li>Item 3</li>
//   </ol>
// </p>
// Всегда не забывайте закрывать теги, так как они применяют форматирование к тексту между открывающим и закрывающим тегами.

//TODO: Line Breaks (Разрывы строк)
// Каждый абзац автоматически начинается с новой строки.
// Но что, если нам нужно поместить новую строку внутри абзаца?
// Это достигается с помощью тега <br>, который делает разрыв строки. Давайте сделаем разрыв строки в нашем первом абзаце:
// <h1>This is my heading</h1>
// <p>
//   This is some paragraph text.
//   <br>
//   A <u>bullet list</u>:
//   <ul>
//     <li><b>one</b></li>
//     <li><s>two</s></li>
//     <li><i>three</i></li>
//   </ul>
// </p>

// <h2>A subheading</h2>
// <p>
//   Another paragraph of text and a <b>numbered list</b>:
//   <ol>
//     <li>Item 1</li>
//     <li>Item 2</li>
//     <li>Item 3</li>
//   </ol>
// </p>
// Обратите внимание, что тег <br> не имеет закрывающего тега.

//TODO: Practice: Formatting the text (Практика: Форматирование текста)
// Важно правильно отформатировать заголовки и заголовки для лучшей читабельности и наглядности.
// Давайте сделаем названия элементов списка жирными.
// Задача:
// 1. Заключите заголовок каждого элемента списка (первую строку его содержимого) в теги <b> и </b>.
// Пример шаблона:
// <h2>Your subheading</h2>
// <ul>
//     <li><b>Your title for item 1</b><br>
//     Your definition for item 1.</li>
//     <li><b>Your title for item 2</b><br>
//     Your definition for item 2.</li>
//  </ul>
// Вы также можете выделить заголовки курсивом, используя тег <i>.

//TODO: Images (Картинки)
// Добавлять изображения легко.
// Изображения добавляются с помощью тега <img>, а URL-адрес изображения указывается с помощью атрибута src. Например, давайте воспользуемся изображением с веб-сайта SoloLearn и добавим его в нашу статью. Изображение доступно по адресу: https://sololearnassets.azureedge.net/home-why-code-1.svg Вот HTML-код для добавления изображения:
{
  /* <img src="https://sololearnassets.azureedge.net/home-why-code-1.svg" />  */
}
{
  /* <h1>This is my heading</h1>
<img src="https://sololearnassets.azureedge.net/home-why-code-1.svg" width="300px" />
<p>
  This is some paragraph text.
  <br>
  A <u>bullet list</u>:
  <ul>
    <li><b>one</b></li>
    <li><s>two</s></li>
    <li><i>three</i></li>
  </ul>
</p>

<h2>A subheading</h2>
<p>
  Another paragraph of text and a <b>numbered list</b>:
  <ol>
    <li><a href="https://www.test.com">Item 1</a></li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ol>
</p>     */
}
// Теги изображений также имеют атрибут alt, который используется, чтобы сообщить поисковым системам название изображения.
// Например: <img src="image.png" alt="Кошка" />

//TODO: Practice: Adding a picture (Практика: Добавление изображения)
// Ты прекрасно справляешься!
// Можете ли вы догадаться, чего не хватает? Да, картина! Итак, давайте добавим одну.
// Задача:
// 1. Под ссылкой откройте тег <img> и поместите ссылку на вашу картинку внутри атрибута src.
// 2. Добавьте тег <br> для разрыва строки. Подсказка Если у вас нет ссылки, вы можете использовать ее в качестве образца изображения.
// Пример:
// <img src="https://sololearnassets.azureedge.net/home-why-code-1.svg"/<br>
// Вы также можете добавить атрибут alt, чтобы сообщить поисковым системам название изображения.

//TODO: Links (Ссылки)
// Мы уже знаем, как делать ссылки с помощью тега <a>. Добавим ссылку на один из наших пунктов в упорядоченный список:
// <h1>This is my heading</h1>
// <p>
//   This is some paragraph text.
//   <br>
//   A <u>bullet list</u>:
//   <ul>
//     <li><b>one</b></li>
//     <li><s>two</s></li>
//     <li><i>three</i></li>
//   </ul>
// </p>

// <h2>A subheading</h2>
// <p>
//   Another paragraph of text and a <b>numbered list</b>:
//   <ol>
//     <li><a href="https://www.test.com">Item 1</a></li>
//     <li>Item 2</li>
//     <li>Item 3</li>
//   </ol>
// </p>
// Итак, первый пункт в нашем списке — это ссылка.
// Теги должны закрываться в соответствующем порядке, чтобы код HTML был действительным.
// Например, после открытия тега <li> и тега <a> сначала должен закрыться тег <a>, перед < /li>.

//TODO: Practice: Follow Us (Практика: Подписывайтесь на нас)
// Следующие важные элементы, которые должны появиться в вашем электронном письме, — это ссылки на ваши страницы в социальных сетях.
// Давайте добавим некоторые.
// Задача:
// 1. Под маркированным списком напишите название раздела и заключите его в элемент <h3>.
// 2. Добавьте несколько тегов <a>, и в каждом добавьте атрибут href со ссылкой на ваш аккаунт в кавычках.
// 3. Добавьте названия страниц между тегами <a> и </a>.
// Пример:
// <h3>Follow us</h3>
// <a href="https://www.facebook.com/Sololearn">Facebook</a>
// <a href="https://www.linkedin.com/company/sololearn-inc-/">LinkedIn</a>
// <a href="https://www.instagram.com/sololearn/">Instagram</a>
// Вы можете добавить целевой атрибут со значением _blank , чтобы ссылка открывалась в новом окне или на новой вкладке.

//TODO: Tables (Таблицы)
// Таблицы создаются с помощью тега <table>.
// Каждая таблица состоит из строк и столбцов.
// Тег <tr> используется для создания строк, а тег <td> — для создания столбцов внутри строк. Например:
// <table>
//   <tr>
//     <td>Name</td>
//     <td>Age</td>
//   </tr>
//   <tr>
//     <td>James Smith</td>
//     <td>42</td>
//   </tr>
//   <tr>
//     <td>Amy Johnson</td>
//     <td>31</td>
//   </tr>
// </table>
// Это создает таблицу с 3 строками и 2 столбцами.
// tr > обозначает строку таблицы , а < td > обозначает данные таблицы .

//TODO: Tables (Таблицы)
// Первая строка таблицы часто является заголовком таблицы и включает в себя метки столбцов.
// HTML предоставляет тег < th >, который можно использовать вместо тегов <td> в заголовке.
// <table>
//   <tr>
//     <th>Name</th>
//     <th>Age</th>
//   </tr>
//   <tr>
//     <td>James Smith</td>
//     <td>42</td>
//   </tr>
//   <tr>
//     <td>Amy Johnson</td>
//     <td>31</td>
//   </tr>
// </table>

// Это делает заголовок таблицы жирным и центрированным. Давайте добавим таблицу в конец нашей статьи и добавим к ней некоторые атрибуты, чтобы показать границы, и добавим отступ внутри ячеек:
// <h1>This is my heading</h1>
// <img src="https://sololearnassets.azureedge.net/home-why-code-1.svg" width="300px" />
// <p>
//   This is some paragraph text.
//   <br>
//   A <u>bullet list</u>:
//   <ul>
//     <li><b>one</b></li>
//     <li><s>two</s></li>
//     <li><i>three</i></li>
//   </ul>
// </p>

// <h2>A subheading</h2>
// <p>
//   Another paragraph of text and a <b>numbered list</b>:
//   <ol>
//     <li><a href="https://www.test.com">Item 1</a></li>
//     <li>Item 2</li>
//     <li>Item 3</li>
//   </ol>
// </p>

// <table border="1" cellpadding="5" cellspacing="0">
//     <tr>
//         <th>Name</th>
//         <th>Age</th>
//     </tr>
//     <tr>
//         <td>James Smith</td>
//         <td>42</td>
//     </tr>
//     <tr>
//         <td>Amy Johnson</td>
//         <td>31</td>
//     </tr>
// </table>
// Теперь наша статья выглядит завершенной и готова к размещению в Интернете.
// Создайте свою собственную статью, отформатируйте ее и поделитесь ею в комментариях ниже!

//TODO: Practice: Designing, Part 1 (Практика: Проектирование, часть 1)
// Пришло время проектировать вещи!
// Во-первых, давайте отцентрируем все ваши заголовки.
// Задача
// 1. Вставить атрибут style="text-align: center" в элементы h1, h2 и h3.
// Пример
// <h1 style="text-align: center">We're glad you're here</h1>
// ..
// <h2 style="text-align: center">Your checklist for success</h2>
// ..
// <h3 style="text-align: center">Follow us</h3>
// Атрибут стиля — это один из способов добавить CSS в HTML.

//TODO: A Landing Page (Целевая страница)
// Целевая страница часто используется в маркетинговых кампаниях для повышения конверсии и потенциальных клиентов.
// Это страница, на которую пользователи попадают после нажатия на ссылку в электронном письме или объявлении. В этом модуле мы возьмем пример целевой страницы и настроим ее внешний вид, изменив ряд элементов, включая тексты, заголовки, цвета и т. д. Мы будем использовать целевую страницу из нашего проекта в курсе адаптивного веб-дизайна:
// См. Рис: LandingPage.png
// Методы, изученные в этом модуле, также можно использовать для изменения шаблонов электронной почты и других веб-страниц.

//TODO: A Landing Page (Целевая страница)
// Вот код нашей целевой страницы:
// HTML:
// <!DOCTYPE html>
// <html>
// 	<head>
// 		<title>My Landing Page</title>
//     </head>
// 	<body>

//     <header>
//         <div class="container">
//         <h1>Awesome App</h1>
//         <h2>This app will change your life!</h2>
//         <a class="btn">Download Now</a>
//         </div>
//     </header>

//     <section class="features">
//         <div class="container">
//         <div class="feature">
//             <img src="https://www.sololearn.com/uploads/img_blue_pin.png" alt=""/>
//             <p>An awesome feature</p>
//         </div>
//         <div class="feature">
//             <img src="https://www.sololearn.com/uploads/img_blue_chart.png" alt=""/>
//             <p>An awesome feature</p>
//         </div>
//         <div class="feature">
//             <img src="https://www.sololearn.com/uploads/img_blue_msg.png" alt=""/>
//             <p>An awesome feature</p>
//         </div>
//         </div>
//     </section>

//     <section class="quote">
//         <blockquote class="container">
//       <p>"Some great quote!"</p>
//       <cite>Satisfied Customer
//       </cite>
//     </blockquote>
//     </section>

//     <footer>
//   <div class="container">
//     <ul>
//       <li><a href="#">Home</a></li>
//       <li><a href="#">About</a></li>
//       <li><a href="#">Contacts</a></li>
//     </ul>
//     <p>&copy; All rights reserved.</p>
//   </div>
// </footer>
// </body>
// </html>

// CSS:
// @import url(//fonts.googleapis.com/css?family=Open+Sans:400,700,800,300);

// html {
//     font-size: 16px;
// }
// body {
//     margin: 0;
//     padding: 0;
//     font-family: 'Open Sans','Helvetica Neue',Helvetica, sans-serif;
//     line-height: 1.45;
// }
// header {
//     color: #FFFFFF;
//     background-color: #284b63;
//     padding: 80px 0;
//     text-align: center;
// }
// h1 {
//   font-size: 3rem;
//   margin: 0 0 16px 0;
// }
// h2 {
//   font-weight: 300;
//   font-size: 1.5rem;
//   margin: 0 0 16px 0;
// }
// .container {
//     margin: 0 auto;
//     padding: 0 20px 0 20px;
//     max-width: 900px;
// }
// .btn {
//     display: inline-block;
//     color: white;
//     font-weight: 500;
//     font-size: 1.25rem;
//     background: #549DA0;
//     border: none;
//     border-radius: 5px;
//     padding: 12px 16px;
//     cursor: pointer;
// }
// .btn:hover {
//     background: #468486;
// }
// section {
//     text-align: center;
//     padding: 40px 0;
// }
// .features {
//     background: #FFFFFF;
//     color: #000000;
// }
// .feature {
//     width: 32%;
//     display: inline-block;
//     font-size: 1rem;
// }
// .feature img {
//     width: 40%;
// }
// .quote {
//     background:#549DA0;
//     color:#FFFFFF;
// }
// blockquote {
//     margin: 0;
//     padding: 0;
//     text-align: center;
// }
// blockquote p {
//     margin: 0 0 5px 0;
//     font-size: 1.5rem;
// }
// blockquote cite {
//     font-size: 1rem;
//     font-style: italic;
// }
// blockquote cite:before {
//     content: '–';
//     margin-right: 5px;
// }
// footer {
//     background: #353535;
//     padding: 32px 0;
//     text-align: center;
//     color: #868686;
//     font-size: 0.75rem;
// }
// footer ul {
//     margin: 0;
//     padding: 0;
//     list-style: none;
// }
// footer li {
//     display: inline-block;
// }
// footer li a {
//     padding: 6px;
//     font-size: 0.875rem;
//     text-decoration: none;
//     color: #c3c3c3;
// }
// footer li a:hover {
//     color: white;
// }
// .submenu {
//     left: 50%;
//     transform: translate(-50%, 0);
//     text-align:center;
//     position: absolute;
//     background-color: #549DA0;
//     min-width: 160px;
//     border-radius: 5px;
//     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
//     display: none;
// }
// .submenu a {
//     color: white;
//     padding: 12px 16px;
//     text-decoration: none;
//     display: block;
// }
// .submenu a:hover {
//     background-color: #468486;
// }
// @media screen and (max-width: 480px) {
//     .btn {
//         display: block;
//         font-size: 1.125rem;
//     }
//     h1 {
//         font-size: 2rem;
//         margin: 0 0 8px 0;
//     }
//     h2 {
//         font-size: 1.125rem;
//     }
//     section {
//         padding: 25px 0 15px 0;
//     }
//     .feature {
//         width: 100%;
//         text-align: left;
//         margin: 0 0 10px 0;
//         font-size: 1rem;
//         display: flex;
//         align-items: center;
//         justify-content: center;
//     }
//     .feature img {
//         width: 15%;
//         min-width: 60px;
//         margin-right: 20px;
//     }
//     .quote {
//         padding: 30px 0;
//     }
//     blockquote p {
//         font-size: 1.125rem;
//     }
//     blockquote cite {
//         font-size: 0.875rem;
//     }
//     footer {
//         padding: 30px 0 10px 0;
//     }
//     footer li {
//         display: block;
//         margin: 5px 0;
//     }
//     .submenu {
//         width: 100%;
//         position: relative;
//     }
// }
// Запустите код, чтобы увидеть внешний вид страницы.
// На первый взгляд код может показаться сложным и длинным, но не волнуйтесь. Мы разберем его и научимся менять соответствующие компоненты.

//TODO: Changing Text (Изменение текста)
// Начнем с изменения текста в шапке страницы:
// См. Рис: ChangingText.png
// Мы хотим изменить основной заголовок на «Sololearn», а второстепенный — на «Learn to Code for Free». Во-первых, нам нужно найти элементы HTML, содержащие тексты в нашем коде: найти соответствующие элементы легко, так как мы можем просто искать текущий текст, который они содержат.
// См. Рис: ChangingText2.png
// Как видите, в основном заголовке используется тег h1, а в подзаголовке — тег h2.

//TODO: Changing Text (Изменение текста)
// Когда мы найдем соответствующие элементы HTML, мы можем просто заменить текст нашей версией:
// Обязательно замените только текст, не изменяя начальный/конечный теги. Запуск кода покажет, что мы успешно изменили заголовки наших страниц.

// Мы используем простой текст в демонстрационных целях. Вы можете изменить код и использовать свой собственный текст.

//TODO: Changing Colors (Изменение цвета)
// Давайте изменим цвет Download Now! кнопка. Чтобы изменить цвет, нам сначала нужно понять, как он применяется к кнопке. Мы уже видели, как применять стили CSS к отдельным элементам, используя встроенные стили. Другой способ применения стиля — использование внешней таблицы стилей . Таким образом, все используемые стили записываются в отдельный файл, на который ссылается HTML-код. Преимущество использования этого метода заключается в том, что вы можете применить один и тот же стиль к нескольким элементам, используя имя элемента, имя класса или идентификатор.
// HTML-элементы могут иметь атрибут class и id, которые можно использовать для ссылки на соответствующий CSS.
// Например: <p class="article"></p>

//TODO: Changing Colors (Изменение цвета)
// Давайте найдем кнопку в нашем HTML-коде. Как видите, кнопка представляет собой тег <a> с class="btn". Это означает, что кнопка оформлена с использованием класса btn в CSS. Давайте откроем файл CSS, коснувшись вкладки CSS на игровой площадке:
// См. Рис: ChangingColors3.png
// Здесь мы обнаруживаем, что к стилю btn применяется много вещей, включая цвет фона. Цвет задается с помощью шестнадцатеричного числа. Давайте изменим его на шестнадцатеричный цвет зеленого цвета: # 76b760
// .btn {
//   display: inline-block;
//   color: white;
//   font-weight: 500;
//   font-size: 1.25rem;
//   background: #76b760;
//   border: none;
//   border-radius: 5px;
//   padding: 12px 16px;
//   cursor: pointer;
// }
// Запустите код, чтобы увидеть результат. Вы можете узнать больше о шестнадцатеричных цветовых кодах в нашем Учебнике по HTML.
// Помните, что стиль фона используется для применения цвета фона, а стиль цвета используется для окрашивания текста.
// Если вы хотите изучить CSS, ознакомьтесь с нашим бесплатным учебным пособием по CSS.

//TODO: Practice: Designing, Part 2 (Практика: Проектирование, часть 2)
// Потрясающий!
// Следующий элемент, который мы собираемся настроить, — это кнопка ссылки .
// Вы, наверное, уже знаете, что мы предопределили некоторый код CSS. Давайте свяжем его с нашим HTML и увидим волшебство.
// Задача
// 1. Заключите весь элемент <a> в секцию <div>.
// 2. В тег <div> добавьте атрибут class="btn".
// 3. В тег <a> добавьте атрибут class="button". Посмотрите на пример кода ниже, чтобы лучше понять, что мы собираемся делать.
// Пример
{
  /* <div class="btn">
    <a  href="https://www.sololearn.com" class="button" >Get Started</a> <br>
</div>
<div class = "image">
    <img src="https://sololearnassets.azureedge.net/home-why-code-1.svg"><br>
</div> */
}
// Используйте тот же прием для изображения — поместите элемент <img> в раздел <div class="image">.
// Если вы хотите стать гуру HTML/CSS, мы изучаем наши курсы HTML и CSS.

//TODO: Removing Elements (Удаление элементов)
// Еще одна полезная вещь, которую нужно изучить, — это удаление элементов со страницы.
// Давайте удалим одну из трех функций:
// Во- первых, нам нужно найти элементы функции в HTML-коде, используя соответствующий текст:
// См. Рис: RemovingElements1.png
// Мы видим, что каждая функция представляет собой изображение и абзац, заключенные в тег div.
// См. Рис: RemovingElements2.png
// Тег div используется как контейнер, разделяющий страницу на разделы.

//TODO: Removing Elements (Удаление элементов)
// Теперь все, что нам нужно сделать, это удалить элемент div функции, которую мы хотим удалить со страницы. Например, давайте удалим среднюю функцию: важно удалить весь элемент с открывающим и закрывающим тегами, а не только изображение или абзац внутри него. Вот полученный код:
// См. Рис: RemovingElements3.png
// Чтение и понимание HTML-кода — важный навык, позволяющий изменять стиль и структуру веб-страниц, шаблонов электронной почты и других веб-ресурсов.

// Настройте целевую страницу дополнительно, изменив цвета фона разделов, текста и других элементов.
// Поделитесь своим творением в разделе комментариев ниже!

//TODO: Practice: Designing, Part 3 (Практика: Проектирование, часть 3)
// А теперь последний штрих!
// Давайте переместим ссылки наших социальных страниц в центр и будем использовать их логотипы вместо названий. 
// Задача 
// 1. Заключите все элементы <a> в элемент <div> и добавьте атрибут class = "social", чтобы связать предопределенный CSS. 
// 2. Вместо названий (Facebook, Instagram и т.д.) открыть теги <img> и добавить атрибут src с соответствующими ссылками на логотипы. Вот ссылки на логотипы некоторых социальных сетей: Facebook, LinkedIn, Instagram. 
// 3. Добавьте height="30px" и width="30px" в каждом теге <img>, чтобы установить правильный размер. 
// Шаблон кода
{
  /* <div class = "social">
<a href="https://www.facebook.com/Sololearn">
<img src="Facebook logo link" height="30px" width="30px"></a>
<a href="https://www.linkedin.com/company/sololearn-inc-/">
<img src="LinkedIn logo link" height="30px" width="30px"></a>
</a>
</div>  */
}
// Вы можете добавить к ссылкам целевой атрибут со значением _blank , чтобы ссылка открывалась в новом окне или на новой вкладке.
